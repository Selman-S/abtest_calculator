function jstat() {}
function ppnd(t) {
    a0 = 2.50662823884,
    a1 = -18.61500062529,
    a2 = 41.39119773534,
    a3 = -25.44106049637,
    b1 = -8.4735109309,
    b2 = 23.08336743743,
    b3 = -21.06224101826,
    b4 = 3.13082909833,
    c0 = -2.78718931138,
    c1 = -2.29796479134,
    c2 = 4.85014127135,
    c3 = 2.32121276858,
    d1 = 3.54388924762,
    d2 = 1.63706781897;
    var e, i, a = .42;
    return Math.abs(t - .5) <= a ? (e = (t - .5) * (t - .5),
    i = (t - .5) * (((a3 * e + a2) * e + a1) * e + a0) / ((((b4 * e + b3) * e + b2) * e + b1) * e + 1)) : t > 0 && 1 > t ? (e = t > .5 ? Math.sqrt(-Math.log(1 - t)) : Math.sqrt(-Math.log(t)),
    i = (((c3 * e + c2) * e + c1) * e + c0) / ((d2 * e + d1) * e + 1),
    .5 > t && (i = -i)) : i = NaN,
    i
}
function fn(t, e, i, a) {
    var n = (i * Math.sqrt(t * (1 - t)) + a * Math.sqrt(e * (1 - e))) / (t - e);
    return 2 * n * n
}
function calcmde(t, e, i, a, n, r, s, o) {
    $.get("https://us-central1-cxl-tests.cloudfunctions.net/cxl-calculator", {
        type: "dunnett_z",
        variants: a,
        tails: i,
        variants: a
    }, function(i) {
        i = JSON.parse(i);
        for (var a = i.dunnett_z, n = ppnd(r), l = e; fn(e, l, a, n) > t; )
            l += 1e-4;
        var u = 0;
        u = s ? (l - e) / e : l - e;
        var c = (100 * u).toFixed(2)
          , d = {};
        d = {
            mde_raw: u,
            mde: c,
            status: "ok"
        },
        o(d, t)
    })
}
function calcMDE(t, e, i, a, n, r) {
    var s = t / e * 2
      , o = n / 100
      , l = 1
      , a = a / 100
      , e = e
      , u = i / 100
      , c = !0;
    window.mde_in = {
        n: s,
        p0: o,
        tails: l,
        power: a,
        variants: e,
        confidence: u,
        relative: c
    };
    var d = {};
    i > 0 && a > 0 && 10 > e && t > 0 && 100 > n ? calcmde(s, o, l, e, u, a, c, r) : (d.status = "error",
    r(d, t))
}
function gm_log(t) {
    var e, i, a, n, r;
    for (cft = [76.18009172947146, -86.50532032941678, 24.01409824083091, -1.231739572450155, .001208650973866179, -5395239384953e-18],
    i = e = t,
    a = e + 5.5,
    a -= (e + .5) * Math.log(a),
    n = 1.000000000190015,
    r = 0; 5 >= r; r++)
        n += cft[r] / ++i;
    return -a + Math.log(2.5066282746310007 * n / e)
}
function gm_s(t, e, i) {
    var a, n, r, s, o, l = 100, u = 3e-7;
    for (s = t,
    r = n = 1 / t,
    a = 1; l >= a; a++)
        if (++s,
        r *= e / s,
        n += r,
        Math.abs(r) < Math.abs(n) * u)
            return o = n * Math.exp(-e + t * Math.log(e) - i);
    return console.log("Sorry, failed to find to a solution in gm_s"),
    -1
}
function gm_c(t, e, i) {
    var a, n, r, s, o, l, u, c = 100, d = 3e-7, p = 1e-30;
    for (n = e + 1 - t,
    r = 1 / p,
    s = 1 / n,
    l = s,
    u = 1; c >= u && (a = -u * (u - t),
    n += 2,
    s = a * s + n,
    p > Math.abs(s) && (s = p),
    r = n + a / r,
    p > Math.abs(r) && (r = p),
    s = 1 / s,
    o = s * r,
    l *= o,
    !(d > Math.abs(o - 1))); u++)
        ;
    return u > c ? -1 : Math.exp(-e + t * Math.log(e) - i) * l
}
function gm_qb(t, e, i) {
    var a;
    if (t + 1 > e) {
        if (a = gm_s(t, e, i),
        0 > a)
            return -1;
        a = 1 - a
    } else
        a = gm_c(t, e, i);
    return a
}
function gm_q(t, e) {
    var i, a = gm_log(t);
    return i = gm_qb(t, e, a)
}
function gm_qderiv(t, e, i) {
    var a;
    return a = -e + (t - 1) * Math.log(e) - i,
    -Math.exp(a)
}
function gm_qinv(t, e) {
    var i, a, n, r, s, o = 20, l = 2e-8, u = gm_log(t);
    for (a = t + Math.sqrt(t) * (.5 - e),
    i = 1; o >= i; i++) {
        if (n = gm_qb(t, a, u),
        0 > n)
            return -1;
        if (n -= e,
        l > Math.abs(n))
            return a;
        r = gm_qderiv(t, a, u),
        s = n / r,
        a -= s
    }
    return console.log("Sorry, failed to find to a solution in gm_qinv"),
    -1
}
function chidist(t, e) {
    var i;
    return 0 > t ? (console.log("x cannot be negative"),
    -1) : 0 >= e || Math.floor(e) != e ? (console.log("Degrees of freedom must be a positive integer"),
    -1) : i = gm_q(e / 2, t / 2)
}
function chi2inv(t, e) {
    var i;
    return 0 >= t || t > 1 ? (console.log("p must be in the range (0,1]"),
    -1) : 1e-5 > Math.abs(t - 1) ? 0 : 0 >= e || Math.floor(e) != e ? (console.log("Degrees of freedom must be a positive integer"),
    -1) : (i = gm_qinv(Math.floor(e) / 2, t),
    2 * i)
}
function CriticalVal(t, e, i, a) {
    var n = t - e
      , r = i - a
      , s = t + i
      , o = (e + a) * t / s
      , l = (n + r) * t / s
      , u = (e + a) * i / s
      , c = (n + r) * i / s;
    return val = (e - o) * (e - o) / o,
    val += (n - l) * (n - l) / l,
    val += (a - u) * (a - u) / u,
    val += (r - c) * (r - c) / c,
    val
}
function ppnd(t) {
    var e, i, a = 2.50662823884, n = -18.61500062529, r = 41.39119773534, s = -25.44106049637, o = -8.4735109309, l = 23.08336743743, u = -21.06224101826, c = 3.13082909833, d = -2.78718931138, p = -2.29796479134, h = 4.85014127135, v = 2.32121276858, f = 3.54388924762, m = 1.63706781897, g = .42;
    return Math.abs(t - .5) <= g ? (e = (t - .5) * (t - .5),
    i = (t - .5) * (((s * e + r) * e + n) * e + a) / ((((c * e + u) * e + l) * e + o) * e + 1)) : t > 0 && 1 > t ? (i = (((v * (e = t > .5 ? Math.sqrt(-Math.log(1 - t)) : Math.sqrt(-Math.log(t))) + h) * e + p) * e + d) / ((m * e + f) * e + 1),
    .5 > t && (i = -i)) : i = NaN,
    i
}
function round_to_places(t, e) {
    var i = 0;
    return Math.abs(t) < .1 && 0 != t && (i = Math.abs(1 + Math.floor(Math.log(Math.abs(t)) / Math.LN10))),
    i > 6 && (i = 6),
    Math.round(t * Math.pow(10, e + i)) / Math.pow(10, e + i)
}
function format_number(t, e) {
    var i = "";
    return 0 > t && (i = "âˆ’"),
    i + Math.abs(round_to_places(t, e))
}
function get_chi_square(t, e, i, a) {
    var n = 0
      , r = e[0][1]
      , s = e[0][0]
      , o = parseFloat((1 - a).toFixed(2))
      , l = 0
      , u = e.length - 1
      , c = new Array;
    return e.forEach(function(e) {
        var d = e[1] / e[0]
          , p = ppnd(1 - o / u / 2);
        if (sd = Math.sqrt(d * (1 - d) / e[0]),
        l > 0) {
            n = CriticalVal(s, r, e[0], e[1]),
            chi = chidist(n, 1);
            var h = chi * u * (1 == i ? .5 : 1)
        }
        var v = d - sd * p
          , f = d + sd * p
          , m = Math.round(1e4 * (h > 1 ? 1 : h)) / 1e4
          , g = "worse";
        g = t[0] / t[1] > e[1] / e[0] ? "worse" : "better",
        1 - a > m ? (significant = !0,
        1 == i && "worse" == g && (significant = !1)) : significant = !1;
        var _ = .05 > m ? 3 : 2
          , w = .001 > m ? "<" : "="
          , b = .001 > m ? "0.001" : format_number(m, _)
          , b = "p " + w + " " + b;
        c[l] = [Math.round(1e3 * d) / 1e3, b, Math.round(1e3 * v) / 1e3 * 100, Math.round(1e3 * f) / 1e3 * 100, significant, g, {
            n0: t[1],
            c0: t[0],
            n1: e[0],
            c1: e[1]
        }],
        l++
    }),
    c
}
function parseFiniteInt(t) {
    var e = parseInt(t);
    return isFinite(e) ? e : 0
}
function calc_ci_and_p(t, e, i, a, n, r) {
    function s(t) {
        $.get("https://us-central1-cxl-tests.cloudfunctions.net/cxl-calculator", {
            type: "z-test",
            n0: t.n0,
            c0: t.c0,
            n1: t.n1,
            c1: t.c1,
            tails: i,
            variants: l
        }, function(e) {
            e = JSON.parse(e);
            var i = o[u]
              , n = e.p
              , c = "worse";
            c = t.c0 / t.n0 > t.c1 / t.n1 ? "worse" : "better",
            1 - a > n ? (significant = !0,
            1 == tails && "worse" == c && (significant = !1)) : significant = !1;
            var d = .05 > n ? 3 : 2
              , p = .001 > n ? "<" : "="
              , h = .001 > n ? "0.001" : format_number(n, d)
              , h = "p " + p + " " + h;
            result.push({
                p_value: h,
                lower_ci_value: i[2],
                upper_ci_value: i[3],
                v: u,
                significant: significant,
                variation_trend: c
            }),
            u++,
            u === l ? r(result) : s(o[u][6])
        })
    }
    if (1 != n)
        return result = [],
        get_chi_square(t, e, i, a).forEach(function(t, e) {
            result.push({
                p_value: t[1],
                lower_ci_value: t[2],
                upper_ci_value: t[3],
                v: e,
                significant: t[4],
                variation_trend: t[5]
            })
        }),
        result;
    result = [];
    var o = get_chi_square(t, e, i, a)
      , l = o.length
      , u = 0;
    s(o[0][6])
}
function setCookie(t, e, i) {
    var a = ""
      , a = t + "=" + e + "; path=/; expires=" + i;
    document.cookie = a
}
function getCookie(t) {
    var e = "; " + document.cookie
      , i = e.split("; " + t + "=");
    return 2 == i.length ? i.pop().split(";").shift() : void 0
}
function upliftSignificance() {
    window.highestCR = 0,
    window.controlCR = 0;
    var t;
    $(".single-variation").each(function(e) {
        var i = $("#v-" + e + "-sessions").val().replace(",", "").replace(" ", "")
          , a = $("#v-" + e + "-conversions").val().replace(",", "").replace(" ", "")
          , n = a / i * 100;
        "number" != typeof n || isNaN(n) ? ($("#v-" + e + "-cr").text("---"),
        $("#v-" + e + "-lift").text("---")) : (conversionRateFormatted = n.toFixed(2),
        $("#v-" + e + "-cr").text(conversionRateFormatted + "%")),
        n > window.highestCR && (window.highestCR = n);
        var r = parseInt($("#v-0-sessions").val().replace(",", "").replace(" ", ""))
          , s = parseInt($("#v-0-conversions").val().replace(",", "").replace(" ", ""))
          , o = s / r * 100;
        if (window.controlCR = parseFloat(o.toFixed(2)),
        e > 0 && "number" == typeof n && !isNaN(n)) {
            var l = (n - o) / o * 100
              , u = l.toFixed(2);
            $("#v-" + e + "-lift").text(u + "%"),
            1 === e ? t = l : l > t && (t = l),
            l > 0 ? ($("div#roi-contribution-" + e).addClass("green"),
            $("div#extra-transactions-" + e).addClass("green"),
            $("div#v-" + e + "-lift").addClass("green"),
            $("div#v-" + e + "-cr").addClass("green"),
            window.dataLayer.push({
                event: "calculator_event",
                event_name: "calculated_winning_variant"
            })) : ($("div#roi-contribution-" + e).removeClass("green"),
            $("div#extra-transactions-" + e).removeClass("green"),
            $("div#v-" + e + "-lift").removeClass("green"),
            $("div#v-" + e + "-cr").removeClass("green"),
            window.dataLayer.push({
                event: "calculator_event",
                event_name: "calculated_losing_variant"
            }))
        }
    }),
    isNaN(parseFloat($("div#v-0-cr").text())) || ($("input#baseline-cr").val(parseFloat($("div#v-0-cr").text())).change(),
    $("input#baseline-cr-2").val(parseFloat($("div#v-0-cr").text())).change()),
    isNaN(t) || ($("input#cr-lift, input#mde").val(t.toFixed(2)).change(),
    window.dataLayer.push({
        event: "calculator_event",
        event_name: "calculated_mde",
        mde_value: t.toFixed(2)
    })),
    $("input#number-of-variations, input#number-of-variations-2").val($(".single-variation").length).change();
    var e = parseInt($("input#test-duration").val())
      , i = 0;
    if ($(".single-variation").each(function(t) {
        var e = parseInt($("#v-" + t + "-sessions").val().replace(",", "").replace(" ", ""));
        isNaN(e) || (i += e)
    }),
    i > 0 && (window.totalSessions = i),
    !isNaN(e)) {
        var a = parseInt(i / e);
        $("input#avg-daily-visitors").val(a).change()
    }
}
function upliftGraphs() {
    window.clearTimeout(window.upliftGraphTimeout),
    window.upliftGraphTimeout = setTimeout(function() {
        $(".chi-squared-result-comments-inner").html(""),
        "bayesian" === stat_mode ? drawUpliftGraphs() : "z-test" === stat_mode ? drawZTest() : "chi-squared" === stat_mode && drawChiSquared(),
        MDE()
    }, 1500)
}
function drawUpliftGraphs() {
    validateVariationsData() ? (cxlBayes.plotButton(),
    cxlBayes.zoomButton(),
    $("#plot-error").html("")) : $("#plot-error").html("<p>More information is required for the graph</p>")
}
function validateVariationsData() {
    var t = !0;
    return $(".single-variation").each(function(e) {
        var i = $("#v-" + e + "-sessions").val().replace(",", "").replace(" ", "")
          , a = $("#v-" + e + "-conversions").val().replace(",", "").replace(" ", "")
          , n = a / i * 100;
        (1 > i || 0 > a || isNaN(n) || 0 > n || n > 100) && (t = !1)
    }),
    t
}
function old_sampleSize() {
    var t = 1 - parseInt($("input#confidence-level").val()) / 100
      , e = parseInt($("input#statistical-power").val()) / 100
      , i = parseFloat($("input#baseline-cr-2").val()) / 100
      , a = i * parseFloat($("input#cr-lift").val()) / 100
      , n = $(".single-variation").length;
    a = Math.abs(a),
    i > .5 && (i = 1 - i);
    var r = ppnd(1 - t / n)
      , s = ppnd(e)
      , o = Math.sqrt(2 * i * (1 - i))
      , l = Math.sqrt(i * (1 - i) + (i + a) * (1 - i - a))
      , u = (r * o + s * l) * (r * o + s * l) / (a * a);
    if ("number" != typeof u || isNaN(u))
        $("#sample-needed").text("---"),
        $("#total-sample-needed").text("---");
    else {
        u = Math.round(u);
        var c = u * $(".single-variation").length;
        u = addCommas(u),
        c = addCommas(c),
        $("#sample-needed").text(u),
        $("#total-sample-needed").text(c)
    }
}
function sampleSize() {
    function t(t) {
        var e = t.ss;
        if ("number" != typeof e || isNaN(e))
            $("#sample-needed").text("---"),
            $("#total-sample-needed").text("---");
        else {
            e = Math.round(e);
            var i = e * $(".single-variation").length;
            e = addCommas(e),
            i = addCommas(i),
            $("#sample-needed").text(e),
            $("#total-sample-needed").text(i)
        }
        testDuration()
    }
    var e = parseInt($("input#confidence-level").val()) / 100
      , i = parseInt($("input#statistical-power").val()) / 100
      , a = parseFloat($("input#baseline-cr-2").val()) / 100
      , n = parseFloat($("input#cr-lift").val()) / 100;
    $(".single-variation").length;
    n = Math.abs(n);
    var r = a
      , s = n
      , o = 1
      , l = i
      , e = e
      , u = parseInt($("input#number-of-variations-2").val());
    if (!(isNaN(r) || isNaN(s) || isNaN(o) || isNaN(l) || isNaN(e) || isNaN(u))) {
        var c = {
            p0: r,
            p1: s,
            tails: o,
            variants: u,
            confidence: e,
            power: l,
            relative: !0
        };
        window.network.sample_size["in"] != JSON.stringify(c) ? (window.network.sample_size["in"] = JSON.stringify(c),
        $.get("https://us-central1-cxl-calculator.cloudfunctions.net/cxl-calculator", {
            type: "sample-size",
            p0: r,
            p1: s,
            tails: o,
            variants: u,
            confidence: e,
            power: l,
            relative: !0
        }, function(e) {
            e = JSON.parse(e),
            t(e),
            window.network.sample_size.out = e
        })) : t(window.network.sample_size.out)
    }
}
function MDE() {
    function t(t) {
        var i = 4;
        if ("t2-" == n && (i = 4.345),
        t && t.weeks) {
            var r = parseInt(a / i)
              , s = (r / o).toFixed(0);
            $("#" + n + "mde-row-1").text(t.weeks[0].mde.mde + "%"),
            $("#t2-vpv-row-1").text(addCommas(s));
            var r = parseInt(a / (i / 2))
              , s = (r / o).toFixed(0);
            $("#" + n + "mde-row-2").text(t.weeks[1].mde.mde + "%"),
            $("#t2-vpv-row-2").text(addCommas(s));
            var r = parseInt(a / i * 3)
              , s = (r / o).toFixed(0);
            $("#" + n + "mde-row-3").text(t.weeks[2].mde.mde + "%"),
            $("#t2-vpv-row-3").text(addCommas(s));
            var r = parseInt(a / i * 4)
              , s = (r / o).toFixed(0);
            $("#" + n + "mde-row-4").text(t.weeks[3].mde.mde + "%"),
            $("#t2-vpv-row-4").text(addCommas(s));
            var r = parseInt(a / i * 5)
              , s = (r / o).toFixed(0);
            $("#" + n + "mde-row-5").text(t.weeks[4].mde.mde + "%"),
            $("#t2-vpv-row-5").text(addCommas(s));
            var r = parseInt(a / i * 6)
              , s = (r / o).toFixed(0);
            $("#" + n + "mde-row-6").text(t.weeks[5].mde.mde + "%"),
            $("#t2-vpv-row-6").text(addCommas(s)),
            e()
        } else
            ;
    }
    function e() {
        $(".mde-row-right").each(function() {
            var t = parseFloat($(this).text().replace(/(%|,)/g, ""))
              , e = parseFloat($("input#cr-lift").val());
            Math.abs(e) > 0 && t > 0 && Math.abs(t) < Math.abs(e) ? $(this).addClass("green") : $(this).removeClass("green")
        })
    }
    if (1 === window.current_tab)
        var i = parseFloat($("input#baseline-cr").val())
          , a = parseInt($("#traffic-through-test").text())
          , n = ""
          , r = parseInt($("input#confidence-level").val())
          , s = parseInt($("input#statistical-power").val())
          , o = parseInt($("input#number-of-variations").val());
    else
        var i = parseFloat($("input#t2-baseline-cr").val())
          , o = isNaN(parseInt($("input#t2-num-variants").val())) ? 2 : parseInt($("input#t2-num-variants").val())
          , a = parseInt($("input#t2-monthly-traffic").val().replace(",", "").replace(" ", ""))
          , n = "t2-"
          , r = parseInt($("input#t2-confidence-level").val())
          , s = parseInt($("input#t2-statistical-power").val());
    if (!isNaN(a) && !isNaN(i) && a > 0 && i > 0 && o > 0) {
        var l = {
            type: "mde",
            monthly_traffic: a / o * 2,
            p0: i / 100,
            variants: o,
            tails: tails,
            confidence: r / 100,
            power: s / 100,
            relative: !0
        };
        window.network.mde["in"] != JSON.stringify(l) ? (window.network.mde["in"] = JSON.stringify(l),
        l.initiated_at = +new Date,
        $.get("https://us-central1-cxl-calculator.cloudfunctions.net/cxl-calculator", l, function(e) {
            e = JSON.parse(e),
            window.network && window.network.mde && window.network.mde.out && window.network.mde.out.input ? e.input.initiated_at > parseInt(window.network.mde.out.input.initiated_at) ? (t(e),
            window.network.mde.out = e) : console.log("Not latest initiation (MDE)") : (t(e),
            window.network.mde.out = e)
        })) : t(window.network.mde.out)
    } else
        $(".mde-row:not(.first-row) .mde-row-right, t2-single-line").text("---")
}
function old_testDuration() {
    var t = parseInt($("div#sample-needed").text().replace(/,/g, ""))
      , e = parseInt($("input#number-of-variations").val())
      , i = parseInt($("input#avg-daily-visitors").val())
      , a = parseInt($("input#traffic-percent-2").val()) / 100;
    if (isNaN(t) || isNaN(i))
        $("div#number-of-days").text("---"),
        $("div#sessions-needed").text("---"),
        $("div#additional-days-needed").text("---");
    else {
        var n = Math.ceil(t * e / (i * a));
        $("div#number-of-days").text(addCommas(n) + " days");
        var r = Math.ceil(n * i);
        if ("number" == typeof window.totalSessions)
            if (r -= totalSessions,
            r = 1 > r ? 0 : addCommas(r),
            r = addCommas(r),
            $("div#sessions-needed").text(r),
            parseInt($("input#test-duration").val()) > 0) {
                var s = n - parseInt($("input#test-duration").val());
                s = s > -1 ? s : 0,
                $("div#additional-days-needed").text(addCommas(s))
            } else
                $("div#additional-days-needed").text("---");
        else
            $("div#sessions-needed").text("---"),
            $("div#additional-days-needed").text("---")
    }
}
function testDuration() {
    function t(t) {
        var e = t.days;
        $("div#number-of-days").text(addCommas(e) + " days");
        var i = Math.ceil(e * a);
        if ("number" == typeof window.totalSessions)
            if (i -= totalSessions,
            i = 1 > i ? 0 : addCommas(i),
            i = addCommas(i),
            $("div#sessions-needed").text(i),
            parseInt($("input#test-duration").val()) > 0) {
                var n = e - parseInt($("input#test-duration").val());
                n = n > -1 ? n : 0,
                $("div#additional-days-needed").text(addCommas(n))
            } else
                $("div#additional-days-needed").text("---");
        else
            $("div#sessions-needed").text("---"),
            $("div#additional-days-needed").text("---")
    }
    var e = parseInt($("div#sample-needed").text().replace(/,/g, ""))
      , i = parseInt($("input#number-of-variations").val())
      , a = parseInt($("input#avg-daily-visitors").val())
      , n = (parseInt($("input#traffic-percent-2").val()) / 100,
    parseInt($("input#confidence-level").val()) / 100)
      , r = parseInt($("input#statistical-power").val()) / 100
      , s = parseFloat($("input#baseline-cr-2").val()) / 100
      , o = parseFloat($("input#cr-lift").val()) / 100;
    o = Math.abs(o);
    var l = a
      , u = s
      , c = o
      , d = 1
      , p = r
      , h = i
      , n = n;
    if (isNaN(e) || isNaN(a))
        $("div#number-of-days").text("---"),
        $("div#sessions-needed").text("---"),
        $("div#additional-days-needed").text("---");
    else {
        var v = {
            nday: l,
            p0: u,
            p1: c,
            tails: d,
            variants: h,
            confidence: n,
            power: p,
            relative: !0
        };
        window.network.test_duration["in"] != JSON.stringify(v) ? (window.network.test_duration["in"] = JSON.stringify(v),
        $.get("https://us-central1-cxl-calculator.cloudfunctions.net/cxl-calculator", {
            type: "test-duration",
            nday: l,
            p0: u,
            p1: c,
            tails: d,
            variants: h,
            confidence: n,
            power: p,
            relative: !0
        }, function(e) {
            e = JSON.parse(e),
            t(e),
            window.network.test_duration.out = e
        })) : t(window.network.test_duration.out)
    }
}
function ppnd(t) {
    var e, i, a = 2.50662823884, n = -18.61500062529, r = 41.39119773534, s = -25.44106049637, o = -8.4735109309, l = 23.08336743743, u = -21.06224101826, c = 3.13082909833, d = -2.78718931138, p = -2.29796479134, h = 4.85014127135, v = 2.32121276858, f = 3.54388924762, m = 1.63706781897, g = .42;
    return Math.abs(t - .5) <= g ? (e = (t - .5) * (t - .5),
    i = (t - .5) * (((s * e + r) * e + n) * e + a) / ((((c * e + u) * e + l) * e + o) * e + 1)) : t > 0 && 1 > t ? (i = (((v * (e = t > .5 ? Math.sqrt(-Math.log(1 - t)) : Math.sqrt(-Math.log(t))) + h) * e + p) * e + d) / ((m * e + f) * e + 1),
    .5 > t && (i = -i)) : i = NaN,
    i
}
function addCommas(t) {
    t += "";
    for (var e = t.split("."), i = e[0], a = e.length > 1 ? "." + e[1] : "", n = /(\d+)(\d{3})/; n.test(i); )
        i = i.replace(n, "$1,$2");
    return i + a
}
function addVariation() {
    var t = $(".single-variation").length
      , e = t;
    $('<div class="shadows single-variation"><div class="pure-g"><div class="white-bg pure-u-1 pure-u-md-2-5"><div class="standard-padding"><h4>Variation ' + e + '</h4><span class="sample-size-needed-note hidden"><i class="alert-image">!</i><span>See below for needed sample size and test duration</span></span><div class="pure-g"><div class="pure-u-1 pure-u-md-1-2"><div class="single-input-container"><label for="v-' + e + '-sessions">Users or sessions</label><span class="input-container"><input id="v-' + e + '-sessions" type="text"></span></div></div><div class="pure-u-1 pure-u-md-1-2"><div class="single-input-container"><label for="v-' + e + '-conversions">Conversions</label><span class="input-container"><input id="v-' + e + '-conversions" type="text"></span></div></div></div></div></diV><div class="blue-bg pure-u-1 pure-u-md-3-5"><div class="results-container standard-padding results-top-padding pure-g"><div class="pure-u-1 pure-u-md-1-4"><div class="result-label">Conversion rate</div><div class="result-value" id="v-' + e + '-cr">---</div></div><div class="pure-u-1 pure-u-md-1-4"><div class="result-label">Lift</div><div class="result-value" id="v-' + e + '-lift">---</div></div><div class="pure-u-1 pure-u-md-1-4"><div class="result-label">Extra transactions<span class="tooltip" title="(CR_original*Monthly_Traffic)-(CR_variant*Monthly_Traffic)"></span></div><div class="result-value" id="extra-transactions-' + e + '">---</div></div><div class="pure-u-1 pure-u-md-1-4"><div class="result-label">Monthly monetary contribution<span class="tooltip" title="AOV*Extra_Transactions"></span></div><div class="result-value" id="roi-contribution-' + e + '">---</div></div></div><div class="p-value-container"><div class="p-value-left"><div class="result-label">P-value</div><div class="result-value roi-contribution grey-text" id="p-value-' + e + '">---</div></div><div class="significant-text" id="significant-text-' + e + '"></div></div><span class="remove-variation">×</span></div></div></div>').appendTo("#variations-container"),
    $("#variations-section-container input").off("keyup change paste"),
    $("#variations-section-container input").on("keyup change paste", function() {
        upliftSignificance(),
        upliftGraphs(),
        checkSRM()
    }),
    t > 4 && $(".add-variation-container").hide(),
    tippy(".tooltip")
}
function removeVariation(t) {
    var e = t.closest(".single-variation");
    e.fadeOut("normal", function() {
        e.remove()
    });
    var i = $(".single-variation").length;
    7 > i && $(".add-variation-container").show()
}
function updateROI() {
    var t = parseInt($("input#avg-daily-visitors").val())
      , e = parseInt($("input#traffic-percent").val());
    if (isNaN(t))
        $("div#traffic-through-test").html("---"),
        $("div.extra-transactions").html("---"),
        $("div.roi-contribution").html("---");
    else {
        var i = parseInt(30 * t * e / 100);
        $("div#traffic-through-test").text(i),
        isNaN(window.controlCR) ? ($("div.extra-transactions").html("---"),
        $("div.roi-contribution").html("---")) : $(".single-variation").each(function(t) {
            if (t > 0) {
                var e = $("#v-" + t + "-cr").text();
                if (e = parseFloat(e),
                e > 0) {
                    var a = parseFloat(window.controlCR / 100) * i
                      , n = parseFloat(e / 100) * i
                      , r = parseInt(n - a);
                    $("div#extra-transactions-" + t).html(addCommas(r));
                    var s = parseFloat($("input#aov").val().replace(",", "."));
                    if (isNaN(s))
                        $("div#roi-contribution-" + t).html("---");
                    else {
                        var o = s * r
                          , o = parseInt(o);
                        $("div#roi-contribution-" + t).html(window.currencySign + addCommas(o)),
                        window.dataLayer.push({
                            event: "calculator_event",
                            event_name: "calculated_extra_revenue",
                            extra_revenue: o
                        })
                    }
                } else
                    $("div#extra-transactions-" + t).html("---").removeClass("green"),
                    $("div#roi-contribution-" + t).html("---").removeClass("green"),
                    $("div#v-" + t + "-lift").removeClass("green"),
                    $("div#v-" + t + "-cr").removeClass("green")
            }
        })
    }
}
function currencyChanged(t) {
    "usd" === t ? t = "$" : "eur" === t ? t = "€" : "gbp" === t ? t = "£" : "mex" === t ? t = "Mex$" : "aud" === t ? t = "A$" : "ruble" === t ? t = "₽" : "yen" === t && (t = "¥"),
    window.currencySign = '<span class="currency-sign">' + t + "</span>",
    $(".currency-sign").replaceWith(window.currencySign)
}
function messageIntervals() {
    setInterval(function() {
        parseInt($("div#sessions-needed").text().replace(/,/g, "")) > 0 ? ($(".sample-size-needed-note, .sample-size-needed-image").removeClass("hidden"),
        $("div#sample-needed, div#number-of-days, div#additional-days-needed").removeClass("green")) : ($(".sample-size-needed-note, .sample-size-needed-image").addClass("hidden"),
        $("div#sample-needed, div#number-of-days, div#additional-days-needed").addClass("green"),
        parseInt($("div#number-of-days").text()) < 7 && $("div#number-of-days").removeClass("green"))
    }, 250)
}
function drawChiSquared() {
    var t = [];
    $(".single-variation").each(function(e) {
        var i = parseInt($("#v-" + e + "-sessions").val().replace(",", "").replace(" ", ""))
          , a = parseInt($("#v-" + e + "-conversions").val().replace(",", "").replace(" ", ""));
        t.push([i, a])
    });
    var e = [parseInt($("#v-0-conversions").val().replace(",", "").replace(" ", "")), parseInt($("#v-0-sessions").val().replace(",", "").replace(" ", ""))]
      , i = parseInt($("input#confidence-level").val()) / 100
      , a = 2
      , n = calc_ci_and_p(e, t, a, i, 0)
      , r = []
      , s = ["Variant", "Low", {
        role: "style"
    }, "High", {
        role: "style"
    }, {
        role: "annotation"
    }];
    r.push(s);
    var o = !1;
    for (v in n) {
        var l = n[v].lower_ci_value.toFixed(1)
          , u = n[v].upper_ci_value.toFixed(1)
          , c = l + "% - " + u + "%"
          , d = n[v].upper_ci_value - n[v].lower_ci_value
          , p = n[v].v
          , h = "0" != p ? "Variant " + p : "Control";
        if (r.push([h, n[v].lower_ci_value, window.colors[p], d, "#ccc", c]),
        $("#p-value-" + p).text(n[v].p_value),
        n[v].significant) {
            $("#significant-text-" + p).text("This variant is significantly " + n[v].variation_trend).attr("data-trend", n[v].variation_trend),
            $(".chi-squared-result-comments-inner").append("<p>Variant " + p + " is significantly " + n[v].variation_trend + ". <span>(" + n[v].p_value + ")</span></p>");
            var o = !0
        } else
            $("#significant-text-" + p).text("Not significant").attr("data-trend", "")
    }
    o || $(".chi-squared-result-comments-inner").append("<p>No significant difference.</p>"),
    window.array = r;
    var f = google.visualization.arrayToDataTable(r)
      , m = {
        chartArea: {
            left: 70,
            top: 40,
            width: "70%"
        },
        legend: "none",
        animation: {
            startup: !0,
            duration: 1e3,
            easing: "out"
        },
        hAxis: {
            minValue: 0
        },
        vAxis: {},
        annotations: {
            alwaysOutside: !0,
            textStyle: {
                fontSize: 14,
                bold: !0
            }
        },
        bar: {
            groupWidth: "75%"
        },
        backgroundColor: {
            fill: "transparent"
        },
        isStacked: !0,
        tooltip: {
            trigger: "none"
        }
    };
    window.chiSquaredDrawn ? window.chiSquaredChart.draw(f, m) : (window.chiSquaredChart = new google.visualization.BarChart(document.getElementById("chi-squared-plot")),
    window.chiSquaredChart.draw(f, m),
    window.chiSquaredDrawn = !0)
}
function drawZTest() {
    var t = parseInt(window.tails) || 1
      , e = [];
    $(".single-variation").each(function(t) {
        var i = parseInt($("#v-" + t + "-sessions").val().replace(",", "").replace(" ", ""))
          , a = parseInt($("#v-" + t + "-conversions").val().replace(",", "").replace(" ", ""));
        e.push([i, a])
    });
    var i = [parseInt($("#v-0-conversions").val().replace(",", "").replace(" ", "")), parseInt($("#v-0-sessions").val().replace(",", "").replace(" ", ""))]
      , a = parseInt($("input#confidence-level").val()) / 100;
    calc_ci_and_p(i, e, t, a, 1, function(t) {
        var e = []
          , i = ["Variant", "Low", {
            role: "style"
        }, "High", {
            role: "style"
        }, {
            role: "annotation"
        }];
        e.push(i);
        var a = !1;
        for (v in t) {
            var n = t[v].lower_ci_value.toFixed(1)
              , r = t[v].upper_ci_value.toFixed(1)
              , s = n + "% - " + r + "%"
              , o = t[v].upper_ci_value - t[v].lower_ci_value
              , l = t[v].v
              , u = "0" != l ? "Variant " + l : "Control";
            if (e.push([u, t[v].lower_ci_value, window.colors[l], o, "#ccc", s]),
            $("#p-value-" + l).text(t[v].p_value),
            t[v].significant) {
                $("#significant-text-" + l).text("This variant is significantly " + t[v].variation_trend).attr("data-trend", t[v].variation_trend),
                $(".chi-squared-result-comments-inner").append("<p>Variant " + l + " is significantly " + t[v].variation_trend + ". <span>(" + t[v].p_value + ")</span></p>");
                var a = !0
            } else
                $("#significant-text-" + l).text("Not significant").attr("data-trend", "")
        }
        a || $(".chi-squared-result-comments-inner").append("<p>No significant difference.</p>"),
        window.array = e;
        var c = google.visualization.arrayToDataTable(e)
          , d = {
            chartArea: {
                left: 70,
                top: 40,
                width: "70%"
            },
            legend: "none",
            animation: {
                startup: !0,
                duration: 1e3,
                easing: "out"
            },
            hAxis: {
                minValue: 0
            },
            vAxis: {},
            annotations: {
                alwaysOutside: !0,
                textStyle: {
                    fontSize: 14,
                    bold: !0
                }
            },
            bar: {
                groupWidth: "75%"
            },
            backgroundColor: {
                fill: "transparent"
            },
            isStacked: !0,
            tooltip: {
                trigger: "none"
            }
        };
        window.zTestDrawn ? window.zTestChart.draw(c, d) : (window.zTestChart = new google.visualization.BarChart(document.getElementById("z-test-plot")),
        window.zTestChart.draw(c, d),
        window.zTestDrawn = !0)
    })
}
function changeStatMode(t) {
    $("body").attr("data-stat-mode") != t && ($("body").attr("data-stat-mode", t),
    $(".single-calculator-method.active").removeClass("active"),
    $("#" + t).addClass("active"),
    $(".single-stat-container").hide(),
    $("." + t + "-stats-container").show(),
    window.stat_mode = t,
    upliftGraphs())
}
function getCP(t, e) {
    e || (e = window.location.href),
    t = t.replace(/[\[\]]/g, "\\$&");
    var i = new RegExp("[?&]" + t + "(=([^&#]*)|&|#|$)")
      , a = i.exec(e);
    return a ? a[2] ? decodeURIComponent(a[2].replace(/\+/g, " ")) : "" : null
}
function setCP(t, e) {
    uri = window.location.href;
    var i = new RegExp("([?&])" + t + "=.*?(&|$)","i")
      , a = -1 !== uri.indexOf("?") ? "&" : "?";
    return uri.match(i) ? uri.replace(i, "$1" + t + "=" + e + "$2") : uri + a + t + "=" + e
}
function getShareUrl() {
    var t = !1;
    document.location.search.includes("speero") && (t = !0),
    window.shareUrl = {
        variations: getShareVariations(),
        baseline_cr: $("input#baseline-cr").val(),
        confidence_level: $("input#confidence-level").val(),
        statistical_power: $("input#statistical-power").val(),
        cr_lift: $("input#cr-lift").val(),
        duration: $("input#test-duration").val(),
        num_variations: $("input#number-of-variations").val(),
        avg_daily_visitors: $("input#avg-daily-visitors").val(),
        traffic_percent: $("input#traffic-percent").val(),
        avg_order_value: $("input#aov").val(),
        currency: $("select#currency").val(),
        mde: $("input#mde").val(),
        t2_traffic: $("input#t2-weekly-traffic").val(),
        t2_conversions: $("input#t2-weekly-conversions").val(),
        t2_variants: $("input#t2-num-variants").val(),
        t2_baseline_cr: $("input#t2-baseline-cr").val(),
        t2_confidence_level: $("input#t2-confidence-level").val(),
        t2_statistical_power: $("input#t2-statistical-power").val(),
        tails: $('input[name="tails"]:checked').val(),
        stats_method: $(".single-calculator-method.active").attr("id"),
        current_tab: window.current_tab || 1,
        speero: t
    };
    var e = btoa(JSON.stringify(window.shareUrl));
    if (t)
        var i = "https://speero.com/ab-test-calculator?calculator=" + e;
    else
        var i = document.location.origin + document.location.pathname + "?calculator=" + e;
    $(".share-url-container").remove(),
    $('<section class="share-url-container"><div class="share-url-inner shadows"><span class="remove-shareurl">×</span><h4>Link to calculator: </h4><textarea rows="6">' + i + "</textarea></div></section>").insertBefore("section#toggle-section"),
    $(".share-url-container textarea").click(function() {
        var t = $(this);
        t.select(),
        t.mouseup(function() {
            return t.unbind("mouseup"),
            !1
        })
    }),
    $(".remove-shareurl").click(function() {
        $(".share-url-container").remove()
    })
}
function getShareVariations() {
    var t = [];
    return $(".single-variation").each(function(e) {
        var i = $("#v-" + e + "-sessions").val()
          , a = $("#v-" + e + "-conversions").val();
        t.push({
            sessions: i,
            conversions: a,
            variation: e
        })
    }),
    t
}
function setShareVariations(t) {
    for (v in t)
        parseInt(t[v].variation) > 1 && addVariation(),
        $("#v-" + t[v].variation + "-sessions").val(t[v].sessions).trigger("change"),
        $("#v-" + t[v].variation + "-conversions").val(t[v].conversions).trigger("change")
}
function getDataFromParameters() {
    var t = getCP("calculator");
    if (t && t.length > 10) {
        var e = atob(t)
          , i = JSON.parse(e);
        setShareVariations(i.variations),
        $("input#baseline-cr").val(i.baseline_cr).trigger("change"),
        $("input#baseline-cr-2").val(i.baseline_cr).trigger("change"),
        $("input#confidence-level").val(i.confidence_level).trigger("change"),
        $("input#statistical-power").val(i.statistical_power).trigger("change"),
        $("input#cr-lift").val(i.cr_lift).trigger("change"),
        $("input#test-duration").val(i.duration).trigger("change"),
        $("input#number-of-variations").val(i.num_variations).trigger("change"),
        $("input#number-of-variations-2").val(i.num_variations_2).trigger("change"),
        $("input#avg-daily-visitors").val(i.avg_daily_visitors).trigger("change"),
        $("input#traffic-percent").val(i.traffic_percent).trigger("change"),
        $("input#aov").val(i.avg_order_value).trigger("change"),
        $("select#currency").val(i.currency).trigger("change"),
        $("input#mde").val(i.mde).trigger("change"),
        currencyChanged(i.currency),
        (document.location.search.indexOf("current-tab=2") > -1 || "2" == i.current_tab) && $("div#toggle-outer-container").click(),
        setTimeout(function() {
            $("input#t2-num-variants").val(i.t2_variants).trigger("change"),
            $("input#t2-baseline-cr").val(i.t2_baseline_cr).trigger("change"),
            $("input#t2-confidence-level").val(i.t2_confidence_level).trigger("change"),
            $("input#t2-statistical-power").val(i.t2_statistical_power).trigger("change"),
            $("input#t2-weekly-traffic").val(0).val(i.t2_traffic).trigger("keyup"),
            $("input#t2-weekly-conversions").val(0).val(i.t2_conversions).trigger("keyup")
        }, 500),
        $(".single-calculator-method#" + i.stats_method).click(),
        $('input[name="tails"][value="' + i.tails + '"]').prop("checked", "true").trigger("change")
    }
}
function initToggles() {
    var t, e = document.getElementById("toggle-outer-container"), i = document.getElementById("toggle-container");
    e.addEventListener("click", function() {
        t = !t,
        t ? (i.style.clipPath = "ellipse(36% 100% at 84% 50%)",
        i.style.backgroundColor = "white") : (i.style.clipPath = "ellipse(28% 100% at 23% 50%)",
        i.style.backgroundColor = "white"),
        $("body").trigger("toggle-switch")
    })
}
function leftLine() {
    setInterval(function() {
        var t = $("span#bc-n-1").offset().top
          , e = $("span#bc-n-4").offset().top
          , i = $("span#bc-n-1").offset().left + 22
          , a = e - t;
        $(".left-line").css({
            top: t,
            height: a,
            left: i
        });
        var n = $("span#bc-n-2-1").offset().top
          , r = $("span#bc-n-2-2").offset().top
          , s = $("span#bc-n-2-1").offset().left + 22
          , o = r - n;
        $(".left-line-2").css({
            top: n,
            height: o,
            left: s
        })
    }, 500)
}
function tabSwitcher() {
    $("body").on("toggle-switch", function() {
        $("#tab-1").is(":visible") ? ($("#tab-1, .left-line").hide(),
        $("#tab-2, .left-line-2").show(),
        $("body").removeClass("test-analysis").addClass("pre-test-analysis"),
        window.current_tab = 2) : ($("#tab-2, .left-line-2").hide(),
        $("#tab-1, .left-line").show(),
        $("body").removeClass("pre-test-analysis").addClass("test-analysis"),
        window.current_tab = 1),
        MDE()
    })
}
function showDummyData() {
    var t = "";
    document.location.search.includes("speero=true") && (t = "&speero=true"),
    $("#show-dummy").click(function() {
        1 === current_tab ? window.location.href = "https://dev.speero.com/calculator/?calculator=eyJ2YXJpYXRpb25zIjpbeyJzZXNzaW9ucyI6IjIwMDAwIiwiY29udmVyc2lvbnMiOiIxMDAwIiwidmFyaWF0aW9uIjowfSx7InNlc3Npb25zIjoiMjEwMDAiLCJjb252ZXJzaW9ucyI6IjEyMDAiLCJ2YXJpYXRpb24iOjF9XSwiYmFzZWxpbmVfY3IiOiI1IiwiY29uZmlkZW5jZV9sZXZlbCI6Ijk1Iiwic3RhdGlzdGljYWxfcG93ZXIiOiI4MCIsImNyX2xpZnQiOiIxNC4yOSIsImR1cmF0aW9uIjoiNSIsIm51bV92YXJpYXRpb25zIjoiMiIsImF2Z19kYWlseV92aXNpdG9ycyI6IjgyMDAiLCJ0cmFmZmljX3BlcmNlbnQiOiIxMDAiLCJhdmdfb3JkZXJfdmFsdWUiOiIyNSIsImN1cnJlbmN5IjoidXNkIiwibWRlIjoiMTQuMjkiLCJ0Ml90cmFmZmljIjoiMTAwMDAiLCJ0Ml9jb252ZXJzaW9ucyI6IjUwMCIsInQyX3ZhcmlhbnRzIjoiMiIsInQyX2Jhc2VsaW5lX2NyIjoiNSIsInQyX2NvbmZpZGVuY2VfbGV2ZWwiOiI5NSIsInQyX3N0YXRpc3RpY2FsX3Bvd2VyIjoiODAifQ==" + t : window.location.href = "https://dev.speero.com/calculator/?calculator=eyJ2YXJpYXRpb25zIjpbeyJzZXNzaW9ucyI6IjIwMDAwIiwiY29udmVyc2lvbnMiOiIxMDAwIiwidmFyaWF0aW9uIjowfSx7InNlc3Npb25zIjoiMjEwMDAiLCJjb252ZXJzaW9ucyI6IjEyMDAiLCJ2YXJpYXRpb24iOjF9XSwiYmFzZWxpbmVfY3IiOiI1IiwiY29uZmlkZW5jZV9sZXZlbCI6Ijk1Iiwic3RhdGlzdGljYWxfcG93ZXIiOiI4MCIsImNyX2xpZnQiOiIxNC4yOSIsImR1cmF0aW9uIjoiNSIsIm51bV92YXJpYXRpb25zIjoiMiIsImF2Z19kYWlseV92aXNpdG9ycyI6IjgyMDAiLCJ0cmFmZmljX3BlcmNlbnQiOiIxMDAiLCJhdmdfb3JkZXJfdmFsdWUiOiIyNSIsImN1cnJlbmN5IjoidXNkIiwibWRlIjoiMTQuMjkiLCJ0Ml90cmFmZmljIjoiMTAwMDAiLCJ0Ml9jb252ZXJzaW9ucyI6IjUwMCIsInQyX3ZhcmlhbnRzIjoiMiIsInQyX2Jhc2VsaW5lX2NyIjoiNSIsInQyX2NvbmZpZGVuY2VfbGV2ZWwiOiI5NSIsInQyX3N0YXRpc3RpY2FsX3Bvd2VyIjoiODAifQ==&current-tab=2" + t
    })
}
function linkAndUnlink() {
    $(".link-icon").click(function() {
        $(this).closest(".single-section-inner").hasClass("linked") ? confirm("Unlinking will clear other fields. Want to continue?") && ($(this).closest(".single-section-inner").addClass("unlinked").removeClass("linked"),
        $("section#variations-section-container input, div#test-roi-container input").val("").trigger("change"),
        $("section#test-duration-container, section#test-duration-container-2, section#variations-section-container, div#test-roi-container, section#uplift-significance-container, div#mde-container").addClass("disabled-section"),
        $(this).parents("div#sample-size-container").length > 0 ? $("div#test-duration-container-2").addClass("disabled-section") : $(this).parents("div#test-duration-container-2").length > 0 && $("div#sample-size-container").addClass("disabled-section")) : ($(this).closest(".single-section-inner").removeClass("unlinked").addClass("linked"),
        $(".disabled-section").removeClass("disabled-section"))
    })
}
function syncTrafficPercents() {
    $("input#traffic-percent").on("keyup change paste", function() {
        var t = $("input#traffic-percent").val()
          , e = $("input#traffic-percent-2").val();
        t != e && $("input#traffic-percent-2").val(t).trigger("change")
    }),
    $("input#traffic-percent-2").on("keyup change paste", function() {
        var t = $("input#traffic-percent").val()
          , e = $("input#traffic-percent-2").val();
        t != e && $("input#traffic-percent").val(e).trigger("change")
    })
}
function syncBaselineCR() {
    $("input#baseline-cr").on("keyup change paste", function() {
        var t = $("input#baseline-cr").val()
          , e = $("input#baseline-cr-2").val();
        t != e && $("input#baseline-cr-2").val(t).trigger("change")
    }),
    $("input#baseline-cr-2").on("keyup change paste", function() {
        var t = $("input#baseline-cr").val()
          , e = $("input#baseline-cr-2").val();
        t != e && $("input#baseline-cr").val(e).trigger("change")
    })
}
function syncCRLift() {
    $("input#cr-lift").on("keyup change paste", function() {
        var t = $("input#cr-lift").val()
          , e = $("input#mde").val();
        t != e && $("input#mde").val(t).trigger("change")
    }),
    $("input#mde").on("keyup change paste", function() {
        var t = $("input#cr-lift").val()
          , e = $("input#mde").val();
        t != e && $("input#cr-lift").val(e).trigger("change")
    })
}
function preTest() {
    $("input#t2-monthly-traffic, input#t2-monthly-conversions").on("keyup change paste", pre_baselineCR),
    $("input#t2-monthly-traffic, input#t2-monthly-conversions, input#t2-baseline-cr, input#t2-confidence-level, input#t2-statistical-power, input#t2-num-variants").on("keyup change paste", MDE)
}
function pre_baselineCR() {
    if ($("input#t2-monthly-traffic").val().length > 0 && $("input#t2-monthly-conversions").val().length > 0) {
        var t = parseInt($("input#t2-weekly-traffic").val().replace(",", "").replace(" ", ""))
          , e = parseInt($("input#t2-weekly-conversions").val().replace(",", "").replace(" ", ""));
        !isNaN(t) && !isNaN(e) && e > 0 && t > 0 ? (baseline_cr = parseFloat(e / t * 100).toFixed(2),
        $("input#t2-baseline-cr").val(baseline_cr)) : $("input#t2-baseline-cr").val("")
    }
}
function checkSRM() {
    clearTimeout(srm_timeout),
    srm_timeout = setTimeout(function() {
        var t = .5
          , e = parseInt($("input#v-0-sessions").val().replace(",", "").replace(" ", ""))
          , i = !1;
        $(".single-variation:not(.control-row)").each(function(a) {
            var n = parseInt($("input#v-" + (a + 1) + "-sessions").val().replace(",", "").replace(" ", ""));
            if (!isNaN(e) && !isNaN(n) && e > 0 && n > 0) {
                var r = e / (e + n)
                  , s = (r - t) / Math.sqrt(r * (1 - r) / (e + n))
                  , o = 2 * (1 - NORMDIST(Math.abs(s), 0, 1, !0));
                .001 > o && (i = !0),
                console.log(o)
            }
        }),
        i ? ($(".srm-row").removeClass("hidden"),
        window.dataLayer.push({
            event: "calculator_event",
            event_name: "show_srm_alert"
        })) : $(".srm-row").addClass("hidden")
    }, 500)
}
function NORMDIST(t, e, i, a) {
    return isNaN(t) || isNaN(e) || isNaN(i) ? "#VALUE!" : 0 >= i ? "#NUM!" : a ? jStat.normal.cdf(t, e, i) : jStat.normal.pdf(t, e, i)
}
j = jstat,
function() {
    var t = !1
      , e = /xyz/.test(function() {}) ? /\b_super\b/ : /.*/;
    this.Class = function() {}
    ,
    Class.extend = function(i) {
        function a() {
            !t && this.init && this.init.apply(this, arguments)
        }
        var n = this.prototype;
        t = !0;
        var r = new this;
        t = !1;
        for (var s in i)
            r[s] = "function" == typeof i[s] && "function" == typeof n[s] && e.test(i[s]) ? function(t, e) {
                return function() {
                    var i = this._super;
                    this._super = n[t];
                    var a = e.apply(this, arguments);
                    return this._super = i,
                    a
                }
            }(s, i[s]) : i[s];
        return a.prototype = r,
        a.constructor = a,
        a.extend = arguments.callee,
        a
    }
}(),
jstat.ONE_SQRT_2PI = .3989422804014327,
jstat.LN_SQRT_2PI = .9189385332046728,
jstat.LN_SQRT_PId2 = .22579135264472744,
jstat.DBL_MIN = 2.22507e-308,
jstat.DBL_EPSILON = 2.220446049250313e-16,
jstat.SQRT_32 = 5.656854249492381,
jstat.TWO_PI = 6.283185307179586,
jstat.DBL_MIN_EXP = -999,
jstat.SQRT_2dPI = .79788456080287,
jstat.LN_SQRT_PI = .5723649429247,
jstat.seq = function(t, e, i) {
    return new Range(t,e,i).getPoints()
}
,
jstat.dnorm = function(t, e, i, a) {
    if (null == e && (e = 0),
    null == i && (i = 1),
    null == a && (a = !1),
    e = new NormalDistribution(e,i),
    isNaN(t)) {
        if (t.length) {
            i = [];
            for (var n = 0; n < t.length; n++)
                i.push(e._pdf(t[n], a));
            return i
        }
        throw "Illegal argument: x"
    }
    return e._pdf(t, a)
}
,
jstat.pnorm = function(t, e, i, a, n) {
    if (null == e && (e = 0),
    null == i && (i = 1),
    null == a && (a = !0),
    null == n && (n = !1),
    e = new NormalDistribution(e,i),
    isNaN(t)) {
        if (t.length) {
            i = [];
            for (var r = 0; r < t.length; r++)
                i.push(e._cdf(t[r], a, n));
            return i
        }
        throw "Illegal argument: x"
    }
    return e._cdf(t, a, n)
}
,
jstat.dlnorm = function(t, e, i, a) {
    if (null == e && (e = 0),
    null == i && (i = 1),
    null == a && (a = !1),
    e = new LogNormalDistribution(e,i),
    isNaN(t)) {
        if (t.length) {
            i = [];
            for (var n = 0; n < t.length; n++)
                i.push(e._pdf(t[n], a));
            return i
        }
        throw "Illegal argument: x"
    }
    return e._pdf(t, a)
}
,
jstat.plnorm = function(t, e, i, a, n) {
    if (null == e && (e = 0),
    null == i && (i = 1),
    null == a && (a = !0),
    null == n && (n = !1),
    e = new LogNormalDistribution(e,i),
    isNaN(t)) {
        if (t.length) {
            i = [];
            for (var r = 0; r < t.length; r++)
                i.push(e._cdf(t[r], a, n));
            return i
        }
        throw "Illegal argument: x"
    }
    return e._cdf(t, a, n)
}
,
jstat.dbeta = function(t, e, i, a, n) {
    if (null == n && (n = !1),
    e = new BetaDistribution(e,i),
    isNaN(t)) {
        if (t.length) {
            for (i = [],
            a = 0; a < t.length; a++)
                i.push(e._pdf(t[a], n));
            return i
        }
        throw "Illegal argument: x"
    }
    return e._pdf(t, n)
}
,
jstat.pbeta = function(t, e, i, a, n, r) {
    if (null == r && (r = !1),
    null == n && (n = !0),
    e = new BetaDistribution(e,i),
    isNaN(t)) {
        if (t.length) {
            for (i = [],
            a = 0; a < t.length; a++)
                i.push(e._cdf(t[a], n, r));
            return i
        }
        throw "Illegal argument: x"
    }
    return e._cdf(t, n, r)
}
,
jstat.dgamma = function(t, e, i, a, n) {
    if (null == i && (i = 1),
    null == a && (a = 1 / i),
    null == n && (n = !1),
    e = new GammaDistribution(e,a),
    isNaN(t)) {
        if (t.length) {
            for (i = [],
            a = 0; a < t.length; a++)
                i.push(e._pdf(t[a], n));
            return i
        }
        throw "Illegal argument: x"
    }
    return e._pdf(t, n)
}
,
jstat.pgamma = function(t, e, i, a, n, r) {
    if (null == i && (i = 1),
    null == a && (a = 1 / i),
    null == n && (n = !0),
    null == r && (r = !1),
    e = new GammaDistribution(e,a),
    isNaN(t)) {
        if (t.length) {
            for (i = [],
            a = 0; a < t.length; a++)
                i.push(e._cdf(t[a], n, r));
            return i
        }
        throw "Illegal argument: x"
    }
    return e._cdf(t, n, r)
}
,
jstat.dt = function(t, e, i, a) {
    if (null == a && (a = !1),
    e = new StudentTDistribution(e,i),
    isNaN(t)) {
        if (t.length) {
            i = [];
            for (var n = 0; n < t.length; n++)
                i.push(e._pdf(t[n], a));
            return i
        }
        throw "Illegal argument: x"
    }
    return e._pdf(t, a)
}
,
jstat.pt = function(t, e, i, a, n) {
    if (null == a && (a = !0),
    null == n && (n = !1),
    e = new StudentTDistribution(e,i),
    isNaN(t)) {
        if (t.length) {
            i = [];
            for (var r = 0; r < t.length; r++)
                i.push(e._cdf(t[r], a, n));
            return i
        }
        throw "Illegal argument: x"
    }
    return e._cdf(t, a, n)
}
,
jstat.plot = function(t, e, i) {
    if (null == t)
        throw "x is undefined in jstat.plot";
    if (null == e)
        throw "y is undefined in jstat.plot";
    if (t.length != e.length)
        throw "x and y lengths differ in jstat.plot";
    var a = {
        series: {
            lines: {},
            points: {}
        }
    }
      , n = [];
    if (void 0 == t.length)
        n.push([t, e]),
        a.series.points.show = !0;
    else
        for (var r = 0; r < t.length; r++)
            n.push([t[r], e[r]]);
    t = "jstat graph",
    null != i && (null != i.type && ("l" == i.type ? a.series.lines.show = !0 : "p" == i.type && (a.series.lines.show = !1,
    a.series.points.show = !0)),
    null != i.hover && (a.grid = {
        hoverable: i.hover
    }),
    null != i.main && (t = i.main)),
    i = new Date;
    var s = i.getMilliseconds() * i.getMinutes() + i.getSeconds();
    $("body").append('<div title="' + t + '" style="display: none;" id="' + s + '"><div id="graph-' + s + '" style="width:95%; height: 95%"></div></div>'),
    $("#" + s).dialog({
        modal: !1,
        width: 475,
        height: 475,
        resizable: !0,
        resize: function() {
            $.plot($("#graph-" + s), [n], a)
        },
        open: function() {
            $.plot($("#graph-" + s), [n], a)
        }
    })
}
,
jstat.log10 = function(t) {
    return Math.log(t) / Math.LN10
}
,
jstat.toSigFig = function(t, e) {
    if (0 == t)
        return 0;
    var i = Math.ceil(jstat.log10(0 > t ? -t : t));
    return i = e - parseInt(i),
    i = Math.pow(10, i),
    Math.round(t * i) / i
}
,
jstat.trunc = function(t) {
    return t > 0 ? Math.floor(t) : Math.ceil(t)
}
,
jstat.isFinite = function(t) {
    return !isNaN(t) && t != Number.POSITIVE_INFINITY && t != Number.NEGATIVE_INFINITY
}
,
jstat.dopois_raw = function(t, e, i) {
    if (0 == e)
        return 0 == t ? i ? 0 : 1 : i ? Number.NEGATIVE_INFINITY : 0;
    if (!jstat.isFinite(e))
        return i ? Number.NEGATIVE_INFINITY : 0;
    if (0 > t)
        return i ? Number.NEGATIVE_INFINITY : 0;
    if (t <= e * jstat.DBL_MIN)
        return i ? -e : Math.exp(-e);
    if (e < t * jstat.DBL_MIN) {
        var a = -e + t * Math.log(e) - jstat.lgamma(t + 1);
        return i ? a : Math.exp(a)
    }
    return a = jstat.TWO_PI * t,
    t = -jstat.stirlerr(t) - jstat.bd0(t, e),
    i ? -.5 * Math.log(a) + t : Math.exp(t) / Math.sqrt(a)
}
,
jstat.bd0 = function(t, e) {
    var i, a, n, r, s;
    if (!jstat.isFinite(t) || !jstat.isFinite(e) || 0 == e)
        throw "illegal parameter in jstat.bd0";
    if (Math.abs(t - e) > .1 * (t + e))
        for (r = (t - e) / (t + e),
        a = (t - e) * r,
        i = 2 * t * r,
        r *= r,
        s = 1; ; s++) {
            if (i *= r,
            n = a + i / ((s << 1) + 1),
            n == a)
                return n;
            a = n
        }
    return t * Math.log(t / e) + e - t
}
,
jstat.stirlerr = function(t) {
    var e, i = [0, .15342640972002736, .08106146679532726, .05481412105191765, .0413406959554093, .03316287351993629, .02767792568499834, .023746163656297496, .020790672103765093, .018488450532673187, .016644691189821193, .015134973221917378, .013876128823070748, .012810465242920227, .01189670994589177, .011104559758206917, .010411265261972096, .009799416126158804, .009255462182712733, .008768700134139386, .00833056343336287, .00793411456431402, .007573675487951841, .007244554301320383, .00694284010720953, .006665247032707682, .006408994188004207, .006171712263039458, .0059513701127588475, .0057462165130101155, .005554733551962801];
    return 15 >= t ? (e = t + t,
    e == parseInt(e) ? i[parseInt(e)] : jstat.lgamma(t + 1) - (t + .5) * Math.log(t) + t - jstat.LN_SQRT_2PI) : (e = t * t,
    t > 500 ? (.08333333333333333 - .002777777777777778 / e) / t : t > 80 ? (.08333333333333333 - (.002777777777777778 - .0007936507936507937 / e) / e) / t : t > 35 ? (.08333333333333333 - (.002777777777777778 - (.0007936507936507937 - .0005952380952380953 / e) / e) / e) / t : (.08333333333333333 - (.002777777777777778 - (.0007936507936507937 - (.0005952380952380953 - .0008417508417508417 / e) / e) / e) / e) / t)
}
,
jstat.lgamma = function(t) {
    return function(t) {
        var e, i;
        if (isNaN(t))
            return t;
        if (0 >= t && t == jstat.trunc(t))
            return console.warn("Negative integer argument in lgammafn_sign"),
            Number.POSITIVE_INFINITY;
        if (e = Math.abs(t),
        10 >= e)
            return Math.log(Math.abs(jstat.gamma(t)));
        if (e > 2.5327372760800758e305)
            return console.warn("Illegal arguement passed to lgammafn_sign"),
            Number.POSITIVE_INFINITY;
        if (t > 0)
            return t > 1e17 ? t * (Math.log(t) - 1) : t > 4934720 ? jstat.LN_SQRT_2PI + (t - .5) * Math.log(t) - t : jstat.LN_SQRT_2PI + (t - .5) * Math.log(t) - t + jstat.lgammacor(t);
        if (i = Math.abs(Math.sin(Math.PI * e)),
        0 == i)
            throw "Should never happen!!";
        if (e = jstat.LN_SQRT_PId2 + (t - .5) * Math.log(e) - t - Math.log(i) - jstat.lgammacor(e),
        Math.abs((t - jstat.trunc(t - .5)) * e / t) < 1.4901161193847656e-8)
            throw "The answer is less than half the precision argument too close to a negative integer";
        return e
    }(t, null)
}
,
jstat.gamma = function(t) {
    var e, i, a, n, r, s, o, l = [-1.716185138865495, 24.76565080557592, -379.80425647094563, 629.3311553128184, 866.9662027904133, -31451.272968848367, -36144.413418691176, 66456.14382024054], u = [-30.840230011973897, 315.35062697960416, -1015.1563674902192, -3107.771671572311, 22538.11842098015, 4755.846277527881, -134659.9598649693, -115132.25967555349], c = [-.001910444077728, .00084171387781295, -.0005952379913043012, .0007936507935003503, -.0027777777777776816, .08333333333333333, .0057083835261];
    if (i = 0,
    a = 1,
    e = 0,
    r = t,
    0 >= r) {
        if (r = -t,
        o = jstat.trunc(r),
        n = r - o,
        0 == n)
            return Number.POSITIVE_INFINITY;
        o != 2 * jstat.trunc(.5 * o) && (i = 1),
        a = -Math.PI / Math.sin(Math.PI * n),
        r += 1
    }
    if (r < jstat.DBL_EPSILON) {
        if (!(r >= jstat.DBL_MIN))
            return Number.POSITIVE_INFINITY;
        n = 1 / r
    } else if (12 > r) {
        for (o = r,
        1 > r ? (s = r,
        r += 1) : (e = parseInt(r) - 1,
        r -= parseFloat(e),
        s = r - 1),
        n = 0,
        c = 1,
        t = 0; 8 > t; ++t)
            n = (n + l[t]) * s,
            c = c * s + u[t];
        if (n = n / c + 1,
        r > o)
            n /= o;
        else if (o > r)
            for (t = 0; e > t; ++t)
                n *= r,
                r += 1
    } else {
        if (!(171.624 >= r))
            return Number.POSITIVE_INFINITY;
        for (u = r * r,
        l = c[6],
        t = 0; 6 > t; ++t)
            l = l / u + c[t];
        l = l / r - r + jstat.LN_SQRT_2PI,
        l += (r - .5) * Math.log(r),
        n = Math.exp(l)
    }
    return i && (n = -n),
    1 != a && (n = a / n),
    n
}
,
jstat.lgammacor = function(t) {
    var e, i = [.16663894804518634, -1384948176067564e-20, 9.81082564692473e-9, -1.809129475572494e-11, 6.221098041892606e-14, -3.399615005417722e-16, 2.683181998482699e-18, -2.868042435334643e-20, 3.9628370610464347e-22, -6.831888753985767e-24, 1.4292273559424982e-25, -3.5475981581010704e-27, 1.025680058010471e-28, -3.401102254316749e-30, 1.276642195630063e-31];
    if (10 > t)
        return Number.NaN;
    if (t >= 3.745194030963158e306)
        throw "Underflow error in lgammacor";
    return 94906265.62425156 > t ? (e = 10 / t,
    jstat.chebyshev(e * e * 2 - 1, i, 5) / t) : 1 / (12 * t)
}
,
jstat.incompleteBeta = function(t, e, i) {
    function a(t, e, i) {
        var a, n, r, s, o, l, u, c, d;
        for (u = t + e,
        d = t + 1,
        c = t - 1,
        s = 1,
        o = 1 - u * i / d,
        Math.abs(o) < 1e-30 && (o = 1e-30),
        l = o = 1 / o,
        a = 1; 100 >= a && (n = 2 * a,
        r = a * (e - a) * i / ((c + n) * (t + n)),
        o = 1 + r * o,
        Math.abs(o) < 1e-30 && (o = 1e-30),
        s = 1 + r / s,
        Math.abs(s) < 1e-30 && (s = 1e-30),
        o = 1 / o,
        l *= o * s,
        r = -(t + a) * (u + a) * i / ((t + n) * (d + n)),
        o = 1 + r * o,
        Math.abs(o) < 1e-30 && (o = 1e-30),
        s = 1 + r / s,
        Math.abs(s) < 1e-30 && (s = 1e-30),
        o = 1 / o,
        n = o * s,
        l *= n,
        !(Math.abs(n - 1) < 3e-12)); a++)
            ;
        return a > 100 ? (console.warn("a or b too big, or MAXIT too small in betacf: " + t + ", " + e + ", " + i + ", " + l),
        l) : (isNaN(l) && console.warn(t + ", " + e + ", " + i),
        l)
    }
    var n;
    if (0 > i || i > 1)
        throw "bad x in routine incompleteBeta";
    return n = 0 == i || 1 == i ? 0 : Math.exp(jstat.lgamma(t + e) - jstat.lgamma(t) - jstat.lgamma(e) + t * Math.log(i) + e * Math.log(1 - i)),
    (t + 1) / (t + e + 2) > i ? n * a(t, e, i) / t : 1 - n * a(e, t, 1 - i) / e
}
,
jstat.chebyshev = function(t, e, i) {
    var a, n, r, s;
    if (1 > i || i > 1e3)
        return Number.NaN;
    if (-1.1 > t || t > 1.1)
        return Number.NaN;
    for (r = 2 * t,
    t = n = a = 0,
    s = 1; i >= s; s++)
        n = a,
        a = t,
        t = r * a - n + e[i - s];
    return .5 * (t - n)
}
,
jstat.fmin2 = function(t, e) {
    return e > t ? t : e
}
,
jstat.log1p = function(t) {
    var e = 0;
    if (-1 >= t)
        return Number.NEGATIVE_INFINITY;
    if (0 > t || t > 1)
        return Math.log(1 + t);
    for (var i = 1; 50 > i; i++)
        i % 2 === 0 ? e -= Math.pow(t, i) / i : e += Math.pow(t, i) / i;
    return e
}
,
jstat.expm1 = function(t) {
    var e;
    return e = Math.abs(t),
    e < jstat.DBL_EPSILON ? t : e > .697 ? Math.exp(t) - 1 : (e = e > 1e-8 ? Math.exp(t) - 1 : (t / 2 + 1) * t,
    e -= (1 + e) * (jstat.log1p(e) - t))
}
,
jstat.logBeta = function(t, e) {
    var i, a, n;
    return a = n = t,
    a > e && (a = e),
    e > n && (n = e),
    0 > a ? (console.warn("Both arguements must be >= 0"),
    Number.NaN) : 0 == a ? Number.POSITIVE_INFINITY : jstat.isFinite(n) ? a >= 10 ? (i = jstat.lgammacor(a) + jstat.lgammacor(n) - jstat.lgammacor(a + n),
    Math.log(n) * -.5 + jstat.LN_SQRT_2PI + i + (a - .5) * Math.log(a / (a + n)) + n * jstat.log1p(-a / (a + n))) : n >= 10 ? (i = jstat.lgammacor(n) - jstat.lgammacor(a + n),
    jstat.lgamma(a) + i + a - a * Math.log(a + n) + (n - .5) * jstat.log1p(-a / (a + n))) : Math.log(jstat.gamma(a) * (jstat.gamma(n) / jstat.gamma(a + n))) : Number.NEGATIVE_INFINITY
}
,
jstat.dbinom_raw = function(t, e, i, a, n) {
    return null == n && (n = !1),
    0 == i ? 0 == t ? n ? 0 : 1 : n ? Number.NEGATIVE_INFINITY : 0 : 0 == a ? t == e ? n ? 0 : 1 : n ? Number.NEGATIVE_INFINITY : 0 : 0 == t ? 0 == e ? n ? 0 : 1 : (i = .1 > i ? -jstat.bd0(e, e * a) - e * i : e * Math.log(a),
    n ? i : Math.exp(i)) : t == e ? (i = .1 > a ? -jstat.bd0(e, e * i) - e * a : e * Math.log(i),
    n ? i : Math.exp(i)) : 0 > t || t > e ? n ? Number.NEGATIVE_INFINITY : 0 : (i = jstat.stirlerr(e) - jstat.stirlerr(t) - jstat.stirlerr(e - t) - jstat.bd0(t, e * i) - jstat.bd0(e - t, e * a),
    t = Math.log(jstat.TWO_PI) + Math.log(t) + jstat.log1p(-t / e),
    n ? i - .5 * t : Math.exp(i - .5 * t))
}
,
jstat.max = function(t) {
    for (var e = Number.NEGATIVE_INFINITY, i = 0; i < t.length; i++)
        t[i] > e && (e = t[i]);
    return e
}
,
Range = Class.extend({
    init: function(t, e, i) {
        this._minimum = parseFloat(t),
        this._maximum = parseFloat(e),
        this._numPoints = parseFloat(i)
    },
    getMinimum: function() {
        return this._minimum
    },
    getMaximum: function() {
        return this._maximum
    },
    getNumPoints: function() {
        return this._numPoints
    },
    getPoints: function() {
        for (var t = [], e = this._minimum, i = (this._maximum - this._minimum) / (this._numPoints - 1), a = 0; a < this._numPoints; a++)
            t[a] = parseFloat(e.toFixed(6)),
            e += i;
        return t
    }
}),
Range.validate = function(t) {
    return !t instanceof Range ? !1 : isNaN(t.getMinimum()) || isNaN(t.getMaximum()) || isNaN(t.getNumPoints()) || t.getMaximum() < t.getMinimum() || t.getNumPoints() <= 0 ? !1 : !0
}
;
var ContinuousDistribution = Class.extend({
    init: function(t) {
        this._name = t
    },
    toString: function() {
        return this._string
    },
    getName: function() {
        return this._name
    },
    getClassName: function() {
        return this._name + "Distribution"
    },
    density: function(t) {
        if (isNaN(t)) {
            if (Range.validate(t)) {
                for (var e = (t.getMaximum() - t.getMinimum()) / t.getNumPoints(), i = t.getMinimum(), a = [], n = 0; n < t.getNumPoints(); n++)
                    a[n] = parseFloat(this._pdf(i).toFixed(15)),
                    i += e;
                return a
            }
            throw "Invalid parameter supplied to " + this.getClassName() + ".density()"
        }
        return parseFloat(this._pdf(t).toFixed(15))
    },
    cumulativeDensity: function(t) {
        if (isNaN(t)) {
            if (Range.validate(t)) {
                for (var e = (t.getMaximum() - t.getMinimum()) / t.getNumPoints(), i = t.getMinimum(), a = [], n = 0; n < t.getNumPoints(); n++)
                    a[n] = parseFloat(this._cdf(i).toFixed(15)),
                    i += e;
                return a
            }
            throw "Invalid parameter supplied to " + this.getClassName() + ".cumulativeDensity()"
        }
        return parseFloat(this._cdf(t).toFixed(15))
    },
    getRange: function(t, e) {
        null == t && (t = 5),
        null == e && (e = 100);
        var i = this.getMean() - t * Math.sqrt(this.getVariance())
          , a = this.getMean() + t * Math.sqrt(this.getVariance());
        return "GammaDistribution" == this.getClassName() || "LogNormalDistribution" == this.getClassName() ? (i = 0,
        a = this.getMean() + t * Math.sqrt(this.getVariance())) : "BetaDistribution" == this.getClassName() && (i = 0,
        a = 1),
        new Range(i,a,e)
    },
    getVariance: function() {},
    getMean: function() {},
    getQuantile: function(t) {
        function e(t, a) {
            for (var n = t.getPoints(), r = 0, s = 999, o = 0; o < n.length; o++) {
                var l = i.cumulativeDensity(n[o]);
                l = Math.abs(l - a),
                s > l && (r = o,
                s = l)
            }
            return 1e-5 >= s ? n[r] : (n = new Range(n[r - 1],n[r + 1],20),
            e(n, a))
        }
        var i = this
          , a = this.getRange(5, 20);
        return e(a, t)
    }
})
  , NormalDistribution = ContinuousDistribution.extend({
    init: function(t, e) {
        this._super("Normal"),
        this._mean = parseFloat(t),
        this._sigma = parseFloat(e),
        this._string = "Normal (" + this._mean.toFixed(2) + ", " + this._sigma.toFixed(2) + ")"
    },
    _pdf: function(t, e) {
        null == e && (e = !1);
        var i = this._sigma
          , a = this._mean;
        if (!jstat.isFinite(i))
            return e ? Number.NEGATIVE_INFINITY : 0;
        if (!jstat.isFinite(t) && a == t)
            return Number.NaN;
        if (0 >= i) {
            if (0 > i)
                throw "invalid sigma in _pdf";
            return t == a ? Number.POSITIVE_INFINITY : e ? Number.NEGATIVE_INFINITY : 0
        }
        return t = (t - a) / i,
        jstat.isFinite(t) ? e ? -(jstat.LN_SQRT_2PI + .5 * t * t + Math.log(i)) : jstat.ONE_SQRT_2PI * Math.exp(-.5 * t * t) / i : e ? Number.NEGATIVE_INFINITY : 0
    },
    _cdf: function(t, e, i) {
        null == e && (e = !0),
        null == i && (i = !1);
        var a, n = this._mean;
        a = this._sigma;
        var r, s;
        return e ? i ? (r = Number.NEGATIVE_INFINITY,
        s = 0) : (r = 0,
        s = 1) : i ? (r = 0,
        s = Number.NEGATIVE_INFINITY) : (r = 1,
        s = 0),
        jstat.isFinite(t) || n != t ? 0 >= a ? 0 > a ? (console.warn("Sigma is less than 0"),
        Number.NaN) : n > t ? r : s : (a = (t - n) / a,
        jstat.isFinite(a) ? (t = a,
        t = function(t, e, i, a, n) {
            var r, s, o, l, u, c = [2.2352520354606837, 161.02823106855587, 1067.6894854603709, 18154.98125334356, .06568233791820745], d = [47.202581904688245, 976.0985517377767, 10260.932208618979, 45507.78933502673], p = [.39894151208813466, 8.883149794388377, 93.50665613217785, 597.2702763948002, 2494.5375852903726, 6848.190450536283, 11602.65143764735, 9842.714838383978, 1.0765576773720192e-8], h = [22.266688044328117, 235.387901782625, 1519.3775994075547, 6485.558298266761, 18615.571640885097, 34900.95272114598, 38912.00328609327, 19685.429676859992], v = [.215898534057957, .12740116116024736, .022235277870649807, .0014216191932278934, 29112874951168793e-21, .023073441764940174], f = [1.284260096144911, .4682382124808651, .06598813786892856, .0037823963320275824, 7297515550839662e-20];
            if (r = .5 * jstat.DBL_EPSILON,
            u = 1 != a,
            a = 0 != a,
            o = Math.abs(t),
            .67448975 >= o) {
                if (o > r)
                    for (p = t * t,
                    s = c[4] * p,
                    r = p,
                    l = 0; 3 > l; ++l)
                        s = (s + c[l]) * p,
                        r = (r + d[l]) * p;
                else
                    s = r = 0;
                c = t * (s + c[3]) / (r + d[3]),
                u && (e = .5 + c),
                a && (i = .5 - c),
                n && (u && (e = Math.log(e)),
                a && (i = Math.log(i)))
            } else if (o <= jstat.SQRT_32) {
                for (s = p[8] * o,
                r = o,
                l = 0; 7 > l; ++l)
                    s = (s + p[l]) * o,
                    r = (r + h[l]) * o;
                c = (s + p[7]) / (r + h[7]),
                p = jstat.trunc(16 * t) / 16,
                d = (t - p) * (t + p),
                n ? (e = -p * p * .5 + .5 * -d + Math.log(c),
                (u && t > 0 || a && 0 >= t) && (i = jstat.log1p(-Math.exp(-p * p * .5) * Math.exp(.5 * -d) * c))) : (e = Math.exp(-p * p * .5) * Math.exp(.5 * -d) * c,
                i = 1 - e),
                t > 0 && (c = e,
                u && (e = i),
                i = c)
            } else if (n && 1e170 > o || u && t > -37.5193 && 8.2924 > t || a && t > -8.2924 && 37.5193 > t) {
                for (p = 1 / (t * t),
                s = v[5] * p,
                r = p,
                l = 0; 4 > l; ++l)
                    s = (s + v[l]) * p,
                    r = (r + f[l]) * p;
                c = p * (s + v[4]) / (r + f[4]),
                c = (jstat.ONE_SQRT_2PI - c) / o,
                p = jstat.trunc(16 * t) / 16,
                d = (t - p) * (t + p),
                n ? (e = -p * p * .5 + .5 * -d + Math.log(c),
                (u && t > 0 || a && 0 >= t) && (i = jstat.log1p(-Math.exp(-p * p * .5) * Math.exp(.5 * -d) * c))) : (e = Math.exp(-p * p * .5) * Math.exp(.5 * -d) * c,
                i = 1 - e),
                t > 0 && (c = e,
                u && (e = i),
                i = c)
            } else
                t > 0 ? (e = n ? 0 : 1,
                i = n ? Number.NEGATIVE_INFINITY : 0) : (e = n ? Number.NEGATIVE_INFINITY : 0,
                i = n ? 0 : 1);
            return [e, i]
        }(t, a, void 0, e ? !1 : !0, i),
        e ? t[0] : t[1]) : n > t ? r : s) : Number.NaN
    },
    getMean: function() {
        return this._mean
    },
    getSigma: function() {
        return this._sigma
    },
    getVariance: function() {
        return this._sigma * this._sigma
    }
})
  , LogNormalDistribution = ContinuousDistribution.extend({
    init: function(t, e) {
        this._super("LogNormal"),
        this._location = parseFloat(t),
        this._scale = parseFloat(e),
        this._string = "LogNormal (" + this._location.toFixed(2) + ", " + this._scale.toFixed(2) + ")"
    },
    _pdf: function(t, e) {
        var i, a = this._scale;
        if (i = this._location,
        null == e && (e = !1),
        0 >= a)
            throw "Illegal parameter in _pdf";
        return 0 >= t ? e ? Number.NEGATIVE_INFINITY : 0 : (i = (Math.log(t) - i) / a,
        e ? -(jstat.LN_SQRT_2PI + .5 * i * i + Math.log(t * a)) : jstat.ONE_SQRT_2PI * Math.exp(-.5 * i * i) / (t * a))
    },
    _cdf: function(t, e, i) {
        var a = this._scale
          , n = this._location;
        if (null == e && (e = !0),
        null == i && (i = !1),
        0 >= a)
            throw "illegal std in _cdf";
        return t > 0 ? new NormalDistribution(n,a)._cdf(Math.log(t), e, i) : e ? i ? Number.NEGATIVE_INFINITY : 0 : i ? 0 : 1
    },
    getLocation: function() {
        return this._location
    },
    getScale: function() {
        return this._scale
    },
    getMean: function() {
        return Math.exp((this._location + this._scale) / 2)
    },
    getVariance: function() {
        return (Math.exp(this._scale) - 1) * Math.exp(2 * this._location + this._scale)
    }
})
  , GammaDistribution = ContinuousDistribution.extend({
    init: function(t, e) {
        this._super("Gamma"),
        this._shape = parseFloat(t),
        this._scale = parseFloat(e),
        this._string = "Gamma (" + this._shape.toFixed(2) + ", " + this._scale.toFixed(2) + ")"
    },
    _pdf: function(t, e) {
        var i, a = this._shape, n = this._scale;
        if (null == e && (e = !1),
        0 > a || 0 >= n)
            throw "Illegal argument in _pdf";
        return 0 > t ? e ? Number.NEGATIVE_INFINITY : 0 : 0 == a ? 0 == t ? Number.POSITIVE_INFINITY : e ? Number.NEGATIVE_INFINITY : 0 : 0 == t ? 1 > a ? Number.POSITIVE_INFINITY : a > 1 ? e ? Number.NEGATIVE_INFINITY : 0 : e ? -Math.log(n) : 1 / n : 1 > a ? (i = jstat.dopois_raw(a, t / n, e),
        e ? i + Math.log(a / t) : i * a / t) : (i = jstat.dopois_raw(a - 1, t / n, e),
        e ? i - Math.log(n) : i / n)
    },
    _cdf: function(t, e, i) {
        function a() {
            return n = 3 * Math.sqrt(f) * (Math.pow(t / f, 1 / 3) + 1 / (9 * f) - 1),
            new NormalDistribution(0,1)._cdf(n, e, i)
        }
        null == e && (e = !0),
        null == i && (i = !1);
        var n, r, s, o, l, u, c, d, p, h, v, f = this._shape, m = this._scale;
        if (0 >= f || 0 >= m)
            return console.warn("Invalid gamma params in _cdf"),
            Number.NaN;
        if (t /= m,
        isNaN(t))
            return t;
        if (0 >= t)
            return e ? i ? Number.NEGATIVE_INFINITY : 0 : i ? 0 : 1;
        if (f > 1e5)
            return a();
        if (t > 1e8 * f)
            return t > jstat.DBL_MAX * f ? e ? i ? 0 : 1 : i ? Number.NEGATIVE_INFINITY : 0 : a();
        if (1 >= t || f > t) {
            v = 1,
            m = f * Math.log(t) - t - jstat.lgamma(f + 1),
            p = s = 1,
            c = f;
            do
                c += 1,
                s *= t / c,
                p += s;
            while (s > jstat.DBL_EPSILON * p)
        } else
            for (v = 0,
            m = f * Math.log(t) - t - jstat.lgamma(f),
            c = 1 - f,
            d = c + t + 1,
            n = 1,
            r = t,
            s = t + 1,
            o = t * d,
            p = s / o,
            h = 1; c += 1,
            d += 2,
            u = c * h,
            l = d * s - u * n,
            u = d * o - u * r,
            !(Math.abs(u) > 0 && (r = p,
            p = l / u,
            Math.abs(r - p) <= jstat.DBL_EPSILON * jstat.fmin2(1, p))); h++)
                n = s,
                r = o,
                s = l,
                o = u,
                Math.abs(l) >= 1e37 && (n /= 1e37,
                r /= 1e37,
                s /= 1e37,
                o /= 1e37);
        return m += Math.log(p),
        e = e == v,
        i && e ? m : e ? Math.exp(m) : i ? m > -Math.LN2 ? Math.log(-jstat.expm1(m)) : jstat.log1p(-Math.exp(m)) : -jstat.expm1(m)
    },
    getShape: function() {
        return this._shape
    },
    getScale: function() {
        return this._scale
    },
    getMean: function() {
        return this._shape * this._scale
    },
    getVariance: function() {
        return this._shape * Math.pow(this._scale, 2)
    }
})
  , BetaDistribution = ContinuousDistribution.extend({
    init: function(t, e) {
        this._super("Beta"),
        this._alpha = parseFloat(t),
        this._beta = parseFloat(e),
        this._string = "Beta (" + this._alpha.toFixed(2) + ", " + this._beta.toFixed(2) + ")"
    },
    _pdf: function(t, e) {
        null == e && (e = !1);
        var i = this._alpha
          , a = this._beta;
        return 0 >= i || 0 >= a ? (console.warn("Illegal arguments in _pdf"),
        Number.NaN) : 0 > t || t > 1 ? e ? Number.NEGATIVE_INFINITY : 0 : 0 == t ? i > 1 ? e ? Number.NEGATIVE_INFINITY : 0 : 1 > i ? Number.POSITIVE_INFINITY : e ? Math.log(a) : a : 1 == t ? a > 1 ? e ? Number.NEGATIVE_INFINITY : 0 : 1 > a ? Number.POSITIVE_INFINITY : e ? Math.log(i) : i : (i = 2 >= i || 2 >= a ? (i - 1) * Math.log(t) + (a - 1) * jstat.log1p(-t) - jstat.logBeta(i, a) : Math.log(i + a - 1) + jstat.dbinom_raw(i - 1, i + a - 2, t, 1 - t, !0),
        e ? i : Math.exp(i))
    },
    _cdf: function(t, e, i) {
        null == e && (e = !0),
        null == i && (i = !1);
        var a = this._alpha
          , n = this._beta;
        return 0 >= a || 0 >= n ? (console.warn("Invalid argument in _cdf"),
        Number.NaN) : 0 >= t ? e ? i ? Number.NEGATIVE_INFINITY : 0 : i ? .1 : 1 : t >= 1 ? e ? i ? .1 : 1 : i ? Number.NEGATIVE_INFINITY : 0 : jstat.incompleteBeta(a, n, t)
    },
    getAlpha: function() {
        return this._alpha
    },
    getBeta: function() {
        return this._beta
    },
    getMean: function() {
        return this._alpha / (this._alpha + this._beta)
    },
    getVariance: function() {
        return this._alpha * this._beta / (Math.pow(this._alpha + this._beta, 2) * (this._alpha + this._beta + 1))
    }
})
  , StudentTDistribution = ContinuousDistribution.extend({
    init: function(t, e) {
        this._super("StudentT"),
        this._dof = parseFloat(t),
        null != e ? (this._mu = parseFloat(e),
        this._string = "StudentT (" + this._dof.toFixed(2) + ", " + this._mu.toFixed(2) + ")") : (this._mu = 0,
        this._string = "StudentT (" + this._dof.toFixed(2) + ")")
    },
    _pdf: function(t, e) {
        if (null == e && (e = !1),
        null == this._mu)
            return this._dt(t, e);
        var i = this._dnt(t, e);
        return i > 1 && console.warn("x:" + t + ", y: " + i),
        i
    },
    _cdf: function(t, e, i) {
        return null == e && (e = !0),
        null == i && (i = !1),
        null == this._mu ? this._pt(t, e, i) : this._pnt(t, e, i)
    },
    _dt: function(t, e) {
        var i, a, n = this._dof;
        return 0 >= n ? (console.warn("Invalid parameters in _dt"),
        Number.NaN) : jstat.isFinite(t) ? jstat.isFinite(n) ? (i = -jstat.bd0(n / 2, (n + 1) / 2) + jstat.stirlerr((n + 1) / 2) - jstat.stirlerr(n / 2),
        a = t * t > .2 * n ? Math.log(1 + t * t / n) * n / 2 : -jstat.bd0(n / 2, (n + t * t) / 2) + t * t / 2,
        n = jstat.TWO_PI * (1 + t * t / n),
        i -= a,
        e ? -.5 * Math.log(n) + i : Math.exp(i) / Math.sqrt(n)) : new NormalDistribution(0,1).density(t, e) : e ? Number.NEGATIVE_INFINITY : 0
    },
    _dnt: function(t, e) {
        null == e && (e = !1);
        var i = this._dof
          , a = this._mu;
        return 0 >= i ? (console.warn("Illegal arguments _dnf"),
        Number.NaN) : 0 == a ? this._dt(t, e) : jstat.isFinite(t) ? !isFinite(i) || i > 1e8 ? new NormalDistribution(a,1).density(t, e) : (Math.abs(t) > Math.sqrt(i * jstat.DBL_EPSILON) ? (a = new StudentTDistribution(i + 2,a),
        i = Math.log(i) - Math.log(Math.abs(t)) + Math.log(Math.abs(a._pnt(t * Math.sqrt((i + 2) / i), !0, !1) - this._pnt(t, !0, !1)))) : i = jstat.lgamma((i + 1) / 2) - jstat.lgamma(i / 2) - .5 * (Math.log(Math.PI) + Math.log(i) + a * a),
        e ? i : Math.exp(i)) : e ? Number.NEGATIVE_INFINITY : 0
    },
    _pt: function(t, e, i) {
        null == e && (e = !0),
        null == i && (i = !1);
        var a, n;
        a = this._dof;
        var r, s;
        return e ? (r = i ? Number.NEGATIVE_INFINITY : 0,
        s = 1) : i ? (r = 0,
        s = Number.NEGATIVE_INFINITY) : (r = 1,
        s = 0),
        0 >= a ? (console.warn("Invalid T distribution _pt"),
        Number.NaN) : (n = new NormalDistribution(0,1),
        jstat.isFinite(t) ? jstat.isFinite(a) ? a > 4e5 ? (a = 1 / (4 * a),
        n._cdf(t * (1 - a) / sqrt(1 + t * t * 2 * a), e, i)) : (n = 1 + t / a * t,
        n > 1e100 ? (a = -.5 * a * (2 * Math.log(Math.abs(t)) - Math.log(a)) - jstat.logBeta(.5 * a, .5) - Math.log(.5 * a),
        a = i ? a : Math.exp(a),
        0 >= t && (e = !e),
        i ? e ? jstat.log1p(-.5 * Math.exp(a)) : a - M_LN2 : (a /= 2,
        e ? .5 - a + .5 : a)) : a > t * t ? (e = new BetaDistribution(.5,a / 2),
        e._cdf(t * t / (a + t * t), !1, i)) : (e = new BetaDistribution(a / 2,.5),
        e._cdf(1 / n, !0, i))) : n._cdf(t, e, i) : 0 > t ? r : s)
    },
    _pnt: function(t, e, i) {
        var a, n, r = this._dof, s = this._mu;
        e ? (a = i ? Number.NEGATIVE_INFINITY : 0,
        n = 1) : i ? (a = 0,
        n = Number.NEGATIVE_INFINITY) : (a = 1,
        n = 0);
        var o, l, u, c, d, p, h, v, f, m, g;
        if (0 >= r)
            return Number.NaN;
        if (0 == r)
            return this._pt(t);
        if (!jstat.isFinite(t))
            return 0 > t ? a : n;
        if (t >= 0)
            n = !1,
            c = t,
            s = s;
        else {
            if (s >= 40 && (!i || !e))
                return a;
            n = !0,
            c = -t,
            s = -s
        }
        if (r > 4e5 || s * s > 2 * Math.LN2 * -jstat.DBL_MIN_EXP)
            return a = 1 / (4 * r),
            t = new NormalDistribution(s,Math.sqrt(1 + c * c * 2 * a)),
            t._cdf(c * (1 - a), e != n, i);
        if (t *= t,
        u = r / (t + r),
        t /= t + r,
        t > 0) {
            if (c = s * s,
            h = .5 * Math.exp(-.5 * c),
            0 == h)
                return console.warn("underflow in _pnt"),
                a;
            for (v = jstat.SQRT_2dPI * h * s,
            a = .5 - h,
            1e-7 > a && (a = -.5 * jstat.expm1(-.5 * c)),
            l = .5,
            r = .5 * r,
            u = Math.pow(u, r),
            o = jstat.LN_SQRT_PI + jstat.lgamma(r) - jstat.lgamma(.5 + r),
            m = jstat.incompleteBeta(l, r, t),
            p = 2 * u * Math.exp(l * Math.log(t) - o),
            o = r * t,
            f = o < jstat.DBL_EPSILON ? o : 1 - u,
            d = o * u,
            o = h * m + v * f,
            g = 1; 1e3 >= g; g++) {
                if (l += 1,
                m -= p,
                f -= d,
                p *= t * (l + r - 1) / l,
                d *= t * (l + r - .5) / (l + .5),
                h *= c / (2 * g),
                v *= c / (2 * g + 1),
                o += h * m + v * f,
                a -= h,
                -1e-10 > a) {
                    console.write("precision error _pnt");
                    break
                }
                if (0 >= a && g > 1)
                    break;
                if (u = 2 * a * (m - p),
                Math.abs(u) < 1e-7)
                    break
            }
            if (1e3 == g)
                throw "Non-convergence _pnt"
        } else
            o = 0;
        return t = new NormalDistribution(0,1),
        o += t._cdf(-s, !0, !1),
        e = e != n,
        o > 1 - 1e-10 && e && console.warn("precision error _pnt"),
        n = jstat.fmin2(o, 1),
        e ? i ? Math.log(n) : n : i ? jstat.log1p(-n) : .5 - n + .5
    },
    getDegreesOfFreedom: function() {
        return this._dof
    },
    getNonCentralityParameter: function() {
        return this._mu
    },
    getMean: function() {
        if (this._dof > 1) {
            var t = .5 * Math.log(this._dof / 2) + jstat.lgamma((this._dof - 1) / 2) - jstat.lgamma(this._dof / 2);
            return Math.exp(t) * this._mu
        }
        return Number.NaN
    },
    getVariance: function() {
        return this._dof > 2 ? this._dof * (1 + this._mu * this._mu) / (this._dof - 2) - this._mu * this._mu * this._dof / 2 * Math.pow(Math.exp(jstat.lgamma((this._dof - 1) / 2) - jstat.lgamma(this._dof / 2)), 2) : Number.NaN
    }
})
  , Plot = Class.extend({
    init: function(t, e) {
        this._container = "#" + String(t),
        this._plots = [],
        this._flotObj = null,
        this._locked = !1,
        this._options = null != e ? e : {}
    },
    getContainer: function() {
        return this._container
    },
    getGraph: function() {
        return this._flotObj
    },
    setData: function(t) {
        this._plots = t
    },
    clear: function() {
        this._plots = []
    },
    showLegend: function() {
        this._options.legend = {
            show: !0
        },
        this.render()
    },
    hideLegend: function() {
        this._options.legend = {
            show: !1
        },
        this.render()
    },
    render: function() {
        this._flotObj = null,
        this._flotObj = $.plot($(this._container), this._plots, this._options)
    }
})
  , DistributionPlot = Plot.extend({
    init: function(t, e, i, a) {
        this._super(t, a),
        this._showPDF = !0,
        this._showCDF = !1,
        this._pdfValues = [],
        this._cdfValues = [],
        this._maxY = 1,
        this._plotType = "line",
        this._fill = !1,
        this._distribution = e,
        this._range = null != i && Range.validate(i) ? i : this._distribution.getRange(),
        null != this._distribution ? this._maxY = this._generateValues() : (this._options.xaxis = {
            min: i.getMinimum(),
            max: i.getMaximum()
        },
        this._options.yaxis = {
            max: 1
        }),
        this.render()
    },
    setHover: function(t) {
        if (t) {
            null == this._options.grid ? this._options.grid = {
                hoverable: !0,
                mouseActiveRadius: 25
            } : (this._options.grid.hoverable = !0,
            this._options.grid.mouseActiveRadius = 25);
            var e = null;
            $(this._container).bind("plothover", function(t, i, a) {
                if ($("#x").text(i.x.toFixed(2)),
                $("#y").text(i.y.toFixed(2)),
                a) {
                    if (e != a.datapoint) {
                        e = a.datapoint,
                        $("#jstat_tooltip").remove();
                        var n = jstat.toSigFig(a.datapoint[0], 2)
                          , r = jstat.toSigFig(a.datapoint[1], 2);
                        t = null,
                        i = a.series.color,
                        "PDF" == a.series.label ? (t = "P(" + n + ") = " + r,
                        i = ["#fee", "#fdd", "#C05F5F"]) : (t = "F(" + n + ") = " + r,
                        i = ["#eef", "#ddf", "#4A4AC0"]),
                        n = a.pageX,
                        a = a.pageY,
                        i = i,
                        $('<div id="jstat_tooltip">' + t + "</div>").css({
                            position: "absolute",
                            display: "none",
                            top: a + 15,
                            "font-size": "small",
                            left: n + 5,
                            border: "1px solid " + i[1],
                            color: i[2],
                            padding: "5px",
                            "background-color": i[0],
                            opacity: .8
                        }).appendTo("body").show()
                    }
                } else
                    $("#jstat_tooltip").remove(),
                    e = null
            }),
            $(this._container).bind("mouseleave", function() {
                $("#jstat_tooltip").is(":visible") && ($("#jstat_tooltip").remove(),
                e = null)
            })
        } else
            null == this._options.grid ? this._options.grid = {
                hoverable: !1
            } : this._options.grid.hoverable = !1,
            $(this._container).unbind("plothover");
        this.render()
    },
    setType: function(t) {
        this._plotType = t,
        t = {};
        var e = {};
        "line" == this._plotType ? (t.show = !0,
        e.show = !1) : "points" == this._plotType ? (t.show = !1,
        e.show = !0) : "both" == this._plotType && (t.show = !0,
        e.show = !0),
        null == this._options.series ? this._options.series = {
            lines: t,
            points: e
        } : (null == this._options.series.lines ? this._options.series.lines = t : this._options.series.lines.show = t.show,
        null == this._options.series.points ? this._options.series.points = e : this._options.series.points.show = e.show),
        this.render()
    },
    setFill: function(t) {
        this._fill = t,
        null == this._options.series ? this._options.series = {
            lines: {
                fill: t
            }
        } : null == this._options.series.lines ? this._options.series.lines = {
            fill: t
        } : this._options.series.lines.fill = t,
        this.render()
    },
    clear: function() {
        this._super(),
        this._distribution = null,
        this._pdfValues = [],
        this._cdfValues = [],
        this.render()
    },
    _generateValues: function() {
        this._cdfValues = [],
        this._pdfValues = [];
        var t = this._range.getPoints();
        this._options.xaxis = {
            min: t[0],
            max: t[t.length - 1]
        };
        for (var e = this._distribution.density(this._range), i = this._distribution.cumulativeDensity(this._range), a = 0; a < t.length; a++)
            (e[a] == Number.POSITIVE_INFINITY || e[a] == Number.NEGATIVE_INFINITY) && (e[a] = null),
            (i[a] == Number.POSITIVE_INFINITY || i[a] == Number.NEGATIVE_INFINITY) && (i[a] = null),
            this._pdfValues.push([t[a], e[a]]),
            this._cdfValues.push([t[a], i[a]]);
        return jstat.max(e)
    },
    showPDF: function() {
        this._showPDF = !0,
        this.render()
    },
    hidePDF: function() {
        this._showPDF = !1,
        this.render()
    },
    showCDF: function() {
        this._showCDF = !0,
        this.render()
    },
    hideCDF: function() {
        this._showCDF = !1,
        this.render()
    },
    setDistribution: function(t, e) {
        this._distribution = t,
        this._range = null != e ? e : t.getRange(),
        this._maxY = this._generateValues(),
        this._options.yaxis = {
            max: 1.1 * this._maxY
        },
        this.render()
    },
    getDistribution: function() {
        return this._distribution
    },
    getRange: function() {
        return this._range
    },
    setRange: function(t) {
        this._range = t,
        this._generateValues(),
        this.render()
    },
    render: function() {
        null != this._distribution ? this._showPDF && this._showCDF ? (this.setData([{
            yaxis: 1,
            data: this._pdfValues,
            color: "rgb(237,194,64)",
            clickable: !1,
            hoverable: !0,
            label: "PDF"
        }, {
            yaxis: 2,
            data: this._cdfValues,
            clickable: !1,
            color: "rgb(175,216,248)",
            hoverable: !0,
            label: "CDF"
        }]),
        this._options.yaxis = {
            max: 1.1 * this._maxY
        }) : this._showPDF ? (this.setData([{
            data: this._pdfValues,
            hoverable: !0,
            color: "rgb(237,194,64)",
            clickable: !1,
            label: "PDF"
        }]),
        this._options.yaxis = {
            max: 1.1 * this._maxY
        }) : this._showCDF && (this.setData([{
            data: this._cdfValues,
            hoverable: !0,
            color: "rgb(175,216,248)",
            clickable: !1,
            label: "CDF)"
        }]),
        this._options.yaxis = {
            max: 1.1
        }) : this.setData([]),
        this._super()
    }
})
  , DistributionFactory = {};
DistributionFactory.build = function(t) {
    if (t.NormalDistribution) {
        if (null != t.NormalDistribution.mean && null != t.NormalDistribution.standardDeviation)
            return new NormalDistribution(t.NormalDistribution.mean[0],t.NormalDistribution.standardDeviation[0]);
        throw "Malformed JSON provided to DistributionBuilder " + t
    }
    if (t.LogNormalDistribution) {
        if (null != t.LogNormalDistribution.location && null != t.LogNormalDistribution.scale)
            return new LogNormalDistribution(t.LogNormalDistribution.location[0],t.LogNormalDistribution.scale[0]);
        throw "Malformed JSON provided to DistributionBuilder " + t
    }
    if (t.BetaDistribution) {
        if (null != t.BetaDistribution.alpha && null != t.BetaDistribution.beta)
            return new BetaDistribution(t.BetaDistribution.alpha[0],t.BetaDistribution.beta[0]);
        throw "Malformed JSON provided to DistributionBuilder " + t
    }
    if (t.GammaDistribution) {
        if (null != t.GammaDistribution.shape && null != t.GammaDistribution.scale)
            return new GammaDistribution(t.GammaDistribution.shape[0],t.GammaDistribution.scale[0]);
        throw "Malformed JSON provided to DistributionBuilder " + t
    }
    if (t.StudentTDistribution) {
        if (null != t.StudentTDistribution.degreesOfFreedom && null != t.StudentTDistribution.nonCentralityParameter)
            return new StudentTDistribution(t.StudentTDistribution.degreesOfFreedom[0],t.StudentTDistribution.nonCentralityParameter[0]);
        if (null != t.StudentTDistribution.degreesOfFreedom)
            return new StudentTDistribution(t.StudentTDistribution.degreesOfFreedom[0]);
        throw "Malformed JSON provided to DistributionBuilder " + t
    }
    throw "Malformed JSON provided to DistributionBuilder " + t
}
,
google.charts.load("current", {
    packages: ["corechart", "bar"]
});
var cxlBayes = function() {
    function t() {}
    function e() {
        i()
    }
    function i() {
        t(),
        window.setTimeout(r, 1)
    }
    function a() {
        window.setTimeout(n, 1)
    }
    function n() {
        window.distros = u();
        for (var t, e, i, a = u(), n = 0, r = 1, s = 0, d = 0, h = !1, v = 0; v < p(); v++)
            a[v] && a[v].dist.mean() > n && (n = a[v].dist.mean(),
            s = v);
        for (var v = 0; v < p(); v++)
            a[v] && a[v].dist.mean() > 0 && a[v].dist.mean() < r && (r = a[v].dist.mean(),
            d = v);
        t = r - 3 * Math.sqrt(a[d].dist.variance()),
        e = n + 3 * Math.sqrt(a[s].dist.variance()),
        t = 0 > t ? 0 : t,
        e = e > 1 ? 1 : e,
        i = l(a, f, t, e);
        for (var v = 0; v < p(); v++)
            a[v] && a[v].dontGraph && (h = !0);
        h ? document.getElementById("bayesian-plot").innerHTML = "<p>Distribution for one or more versions could not be charted - probably due to difficulties calculating for very high numbers of trials.</p>" : c(i, a),
        o(a, m)
    }
    function r() {
        for (var t = u(), e = l(t), i = !1, a = 0; a < p(); a++)
            t[a] && t[a].dontGraph && (i = !0);
        i ? document.getElementById("bayesian-plot").innerHTML = "<p>Distribution for one or more versions could not be charted - probably due to difficulties calculating for very high numbers of trials.</p>" : c(e, t),
        o(t, m)
    }
    function s(t) {
        for (var e = [], i = t; i--; )
            e[i] = 0;
        return e
    }
    function o(t, e) {
        for (var i, a, n, r, o = s(p()), e = e || 1e3, l = 0; e > l; l++) {
            r = 0;
            for (var u = 0; u < p(); u++)
                t[u] && (i = t[u].dist.sample(),
                i > r && (n = u,
                r = i));
            o[n]++
        }
        for (window.variations = {},
        l = 0; l < p(); l++)
            t[l] && (a = Math.round(1e3 * t[l].low95) / 10 + "% and " + Math.round(1e3 * t[l].high95) / 10 + "%",
            window.variations[l] = {},
            window.variations[l].label = t[l].label,
            window.variations[l].value = Math.round(o[l] / (e / 100)));
        d()
    }
    function l(t, e, i, a) {
        var n, r, s, o, l, u = [], c = [];
        i = i || 0,
        a = a || 1;
        for (var d = 0; d < p(); d++)
            t[d] && (t[d].dontGraph = !1,
            0 === t[d].numSuccesses && (t[d].low95 = 0),
            0 === t[d].numFailures && (t[d].high95 = 1));
        e = e || f,
        l = a - i;
        for (var h = 0; e + 1 >= h; h++) {
            r = h / e,
            s = i + l * r,
            n = 100 * s,
            c = [n];
            for (var d = 0; d < p(); d++)
                t[d] && (o = t[d].dist.pdf(s),
                isNaN(o) ? (t[d].dontGraph = !0,
                c.push(0)) : c.push(o),
                t[d].low95 || 0 === t[d].low95 || t[d].dist.cdf(r) > .025 && (t[d].low95 = r - 1 / e),
                t[d].high95 || t[d].dist.cdf(r) > .975 && (t[d].high95 = r));
            u.push(c)
        }
        return u
    }
    function u() {
        for (var t, e, i, a = [], n = (document.forms.TestResults,
        {}), r = 0; r < p(); r++) {
            if (n = {},
            t = parseInt($("input#v-" + r + "-sessions").val().replace(",", "").replace(" ", "")),
            e = parseInt($("input#v-" + r + "-conversions").val().replace(",", "").replace(" ", "")),
            i = t - e,
            isNaN(t) || isNaN(e))
                return console.log("cleared plots 1"),
                $("#plot-error").html("<p>All values must be integers.</p>"),
                !1;
            if (e > t)
                return console.log("cleared plots 2"),
                $("#plot-error").html("<p>You have a row with more successes than trials.</p>"),
                !1;
            t >= 0 && (n.dist = jStat.beta(e + h.a, i + h.b),
            n.numSuccesses = e,
            n.numFailures = i,
            n.label = 0 === r ? "Control" : "Variation " + r,
            a[r] = n)
        }
        return a
    }
    function c(t, e) {
        var i = new google.visualization.DataTable;
        i.addColumn("number", "Conversion");
        for (var a = 0; a < p(); a++)
            e[a] && i.addColumn("number", e[a].label);
        i.addRows(t);
        var n = {
            hAxis: {
                title: "Conversion Rate (%)",
                titleTextStyle: {
                    color: "black"
                },
                gridlines: {
                    count: 10
                }
            },
            vAxis: {
                title: "Probability density",
                titleTextStyle: {
                    color: "black"
                }
            },
            legend: {
                position: "top",
                alignment: "start"
            },
            chartArea: {
                left: 20,
                top: 50,
                bottom: 40,
                width: "95%",
                height: "90%"
            },
            animation: {
                startup: !0,
                duration: 1e3,
                easing: "out"
            },
            enableInteractivity: !1,
            backgroundColor: {
                fill: "transparent"
            }
        };
        window.bayesianDrawn ? window.bayesianChart.draw(i, n) : (window.bayesianChart = new google.visualization.AreaChart(document.getElementById("bayesian-plot")),
        window.bayesianChart.draw(i, n),
        window.bayesianDrawn = !0)
    }
    function d() {
        var t = []
          , e = ["label", "Probability", {
            role: "annotation"
        }, {
            role: "style"
        }];
        t.push(e);
        for (v in variations)
            t.push([variations[v].label, variations[v].value, variations[v].value + "%", window.colors[v]]);
        window.array = t;
        var i = google.visualization.arrayToDataTable(t)
          , a = {
            title: "Probability of being a winner",
            chartArea: {
                left: 70,
                top: 40,
                width: "70%"
            },
            legend: "none",
            animation: {
                startup: !0,
                duration: 1e3,
                easing: "out"
            },
            hAxis: {
                title: "% chance of out performing",
                minValue: 0
            },
            vAxis: {},
            annotations: {
                textStyle: {
                    fontSize: 14,
                    bold: !0
                }
            },
            backgroundColor: {
                fill: "transparent"
            }
        };
        window.probabilityDrawn ? window.probabilityChart.draw(i, a) : (window.probabilityChart = new google.visualization.BarChart(document.getElementById("probability-plot")),
        window.probabilityChart.draw(i, a),
        window.probabilityDrawn = !0)
    }
    var p = function() {
        return $(".single-variation").length
    }
      , h = {
        a: .5,
        b: .5
    }
      , f = 2e3
      , m = 5e3;
    return {
        plotGraph: i,
        plotButton: e,
        zoomButton: a
    }
}()
  , confidence_level = .95;
window.chi_squared_variations = {},
function() {
    function t(t, e) {
        var i = 0;
        return Math.abs(t) < .1 && 0 != t && (i = Math.abs(1 + Math.floor(Math.log(Math.abs(t)) / Math.LN10))),
        i > 6 && (i = 6),
        Math.round(t * Math.pow(10, e + i)) / Math.pow(10, e + i)
    }
    function e(e, i) {
        var a = "";
        return 0 > e && (a = "âˆ’"),
        a + Math.abs(t(e, i))
    }
    function i(t, e) {
        return !isNaN(t) && !isNaN(e) && t >= 0 && e >= t
    }
    function a(t, e) {
        return (t - e) * (t - e) / t
    }
    function n(t, e, i) {
        var a = t / e
          , n = a + i * i / (2 * e)
          , r = i * Math.sqrt((a * (1 - a) + i * i / (4 * e)) / e)
          , s = 1 + i * i / e;
        return [(n - r) / s, (n + r) / s]
    }
    function r(t, e, i, n) {
        var r = 0
          , s = (t + i) / (e + n);
        return r += a(s * e, t),
        r += a((1 - s) * e, e - t),
        r += a(s * n, i),
        r += a((1 - s) * n, n - i)
    }
    window.get_chi_squared = function(t, a, s, o, l) {
        var u = a
          , c = t
          , d = o
          , p = s
          , h = 0
          , v = 0
          , f = 0
          , m = 0
          , g = !1
          , _ = "worse";
        confidence_level = parseInt($("input#confidence-level").val()) / 100;
        var w = ppnd(.995)
          , b = ppnd(1 - (1 - confidence_level) / 2)
          , N = n(u, c, w)
          , I = n(d, p, w)
          , M = (Math.max(N[0], N[1], I[0], I[1]),
        n(u, c, b))
          , y = n(d, p, b);
        i(u, c) ? (h = e(100 * M[0], 1),
        v = e(100 * M[1], 1)) : (h = 0,
        v = 0),
        i(d, p) ? (f = e(100 * y[0], 1),
        m = e(100 * y[1], 1)) : (f = 0,
        m = 0);
        var x = r(u, c, d, p)
          , j = isNaN(x) ? NaN : 1 - jstat.pgamma(x, .5, .5)
          , F = .05 > j ? 3 : 2
          , T = .001 > j ? "<" : "="
          , D = .001 > j ? "0.001" : e(j, F)
          , D = "p " + T + " " + D;
        return 1 - confidence_level > j ? (_ = u / c > d / p ? "worse" : "better",
        g = !0) : g = !1,
        1 === l && (window.chi_squared_variations = {},
        window.chi_squared_variations.variation_0 = {
            v: 0,
            lower_ci_value: parseFloat(h),
            upper_ci_value: parseFloat(v)
        }),
        window.chi_squared_variations["variation_" + l] = {
            v: l,
            lower_ci_value: parseFloat(f),
            upper_ci_value: parseFloat(m),
            p_value: D,
            significant: g,
            variation_trend: _
        },
        {
            lower_ci_value1: h,
            upper_ci_value1: v,
            lower_ci_value2: f,
            upper_ci_value2: m,
            variation: l,
            p_value: D,
            significant: g,
            variation_trend: _
        }
    }
}(),
window.z_test_variations = {},
function() {
    function t(t, e, i, a) {
        return isNaN(t) || isNaN(e) || isNaN(i) ? "NaN" : 0 >= i ? "NaN" : a ? jStat.normal.cdf(t, e, i) : jStat.normal.pdf(t, e, i)
    }
    function e(t, e) {
        var a = "";
        return 0 > t && (a = "âˆ’"),
        a + Math.abs(i(t, e))
    }
    function i(t, e) {
        var i = 0;
        return Math.abs(t) < .1 && 0 != t && (i = Math.abs(1 + Math.floor(Math.log(Math.abs(t)) / Math.LN10))),
        i > 6 && (i = 6),
        Math.round(t * Math.pow(10, e + i)) / Math.pow(10, e + i)
    }
    var a = {
        1: {
            .9: 1.281551,
            .95: 1.644853,
            .99: 2.326348
        },
        2: {
            .9: 1.644853,
            .95: 1.959964,
            .99: 2.575829
        }
    };
    window.get_z_test = function(i, n, r, s, o, l) {
        var u = {};
        confidence = Number($("input#confidence-level").val()) / 100,
        cr_A = n / i,
        cr_B = s / r,
        cr_lift = (cr_B - cr_A) / cr_A,
        se_A = Math.sqrt(cr_A * (1 - cr_A) / i),
        se_B = Math.sqrt(cr_B * (1 - cr_B) / r),
        seDiff = Math.sqrt(Math.pow(se_A, 2) + Math.pow(se_B, 2)),
        z_score = (cr_B - cr_A) / seDiff,
        critical_z = a[o][confidence],
        console.log("critical: " + critical_z),
        lower_A = cr_A - critical_z * se_A,
        upper_A = cr_A + critical_z * se_A,
        lower_B = cr_B - critical_z * se_B,
        upper_B = cr_B + critical_z * se_B,
        power_input = (cr_A + se_A * critical_z - cr_B) / se_B,
        p_value = 1 - t(z_score, 0, 1, !0),
        significant = p_value < 1 - confidence && 1 == o || (p_value > confidence + (1 - confidence) / 2 || p_value < 1 - confidence - (1 - confidence) / 2) && 2 == o ? !0 : !1,
        positive = cr_B > cr_A ? !0 : !1,
        positive || 1 == o ? power = 1 - t((cr_A + se_A * critical_z - cr_B) / se_B, 0, 1, !0) : power = 1 - t((cr_B + se_B * critical_z - cr_A) / se_A, 0, 1, !0);
        var c = p_value < .05 ? 3 : 2
          , d = p_value < .001 ? "<" : "="
          , p = p_value < .001 ? "0.001" : e(p_value, c)
          , p = "p " + d + " " + p;
        return u.cr_A = cr_A,
        u.cr_B = cr_B,
        u.cr_lift = (100 * cr_lift).toFixed(2) + "%",
        u.p_value = p_value.toFixed(4),
        u.significant = significant,
        u.verdict = cr_A > cr_B ? "worse" : "better",
        u.variation = l,
        u.lower_A = lower_A,
        u.upper_A = upper_A,
        u.lower_B = lower_B,
        u.upper_B = upper_B,
        1 === l && (window.z_test_variations = {},
        window.z_test_variations.variation_0 = {
            v: 0,
            lower_ci_value: parseFloat((100 * parseFloat(lower_A)).toFixed(1)),
            upper_ci_value: parseFloat((100 * parseFloat(upper_A)).toFixed(1))
        }),
        window.z_test_variations["variation_" + l] = {
            v: l,
            lower_ci_value: parseFloat((100 * parseFloat(lower_B)).toFixed(1)),
            upper_ci_value: parseFloat((100 * parseFloat(upper_B)).toFixed(1)),
            p_value: p,
            significant: significant,
            variation_trend: cr_A > cr_B ? "worse" : "better"
        },
        u
    }
}(),
"true" == getCookie("has-closed-weekly-message") || setTimeout(function() {
    $('').insertBefore("header.main-header:eq(0)"),
    $("#weekly-message span").click(function() {
        $("#weekly-message").slideUp(),
        setCookie("has-closed-weekly-message", "true", "Tue, 5 Sep 2023 00:00:01 GMT")
    })
}, 3e3),
window.currencySign = '<span class="currency-sign">$</span>',
window.stat_mode = "bayesian",
window.current_tab = 1,
window.colors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6"],
window.tails = 1,
window.network = {
    sample_size: {
        "in": "",
        out: {}
    },
    z_test: {
        "in": "",
        out: {}
    },
    mde: {
        "in": "",
        out: {}
    },
    test_duration: {
        "in": "",
        out: {}
    }
},
$(document).ready(function() {
    $("#variations-section-container input").on("keyup change paste", function() {
        upliftSignificance(),
        upliftGraphs(),
        checkSRM()
    }),
    $("#sample-size-container input").on("keyup change paste", function() {
        sampleSize(),
        upliftGraphs()
    }),
    $("#test-duration-container input, #test-duration-container-2 input, #sample-size-container input").on("keyup change paste", function() {
        testDuration()
    }),
    $("input#test-duration").on("keyup change paste", function() {
        upliftSignificance()
    }),
    $("#add-variation").click(function() {
        addVariation()
    }),
    $("#variations-container").on("click", ".remove-variation", function() {
        removeVariation($(this)),
        upliftSignificance(),
        upliftGraphs(),
        checkSRM()
    }),
    $("#test-duration-container input, #test-duration-container-2 input, #sample-size-container input, #test-roi-container input").on("keyup change paste", function() {
        updateROI()
    }),
    $("#test-duration-container-2 input").on("keyup change paste", function() {
        MDE()
    }),
    $("select#currency").change(function() {
        var t = this.value;
        currencyChanged(t)
    }),
    $("input[type=radio][name=tails]").change(function() {
        var t = this.value;
        window.tails = t,
        upliftGraphs()
    }),
    $(".single-calculator-method").click(function() {
        var t = $(this).attr("id");
        changeStatMode(t)
    }),
    $("input[type=radio][name=confidence-radio]").change(function() {
        $("#confidence-level").val(this.value).change()
    }),
    $("input[type=radio][name=t2-confidence-radio]").change(function() {
        $("#t2-confidence-level").val(this.value).change()
    }),
    messageIntervals(),
    $("#share-results").click(function() {
        getShareUrl()
    }),
    $("#print-results").click(function() {
        window.print()
    }),
    initToggles(),
    tabSwitcher(),
    setTimeout(function() {
        getDataFromParameters()
    }, 1e3),
    leftLine(),
    tippy(".tooltip"),
    preTest(),
    showDummyData(),
    linkAndUnlink(),
    syncTrafficPercents(),
    syncBaselineCR(),
    syncCRLift(),
    $("input#number-of-variations").on("paste keyup", function() {
        parseInt($(this).val()) > 10 && $(this).val(10),
        setTimeout(function() {
            $("input#number-of-variations-2").val($("input#number-of-variations").val()).trigger("change")
        }, 25)
    }),
    $("input#number-of-variations-2").on("paste keyup", function() {
        parseInt($(this).val()) > 10 && $(this).val(10),
        setTimeout(function() {
            $("input#number-of-variations").val($("input#number-of-variations-2").val()).trigger("change")
        }, 25)
    }),
    $("#t2-weekly-traffic").on("paste keyup", function() {
        var t = parseInt($("#t2-weekly-traffic").val().replace(",", "").replace(" ", ""))
          , e = parseInt(4.345 * t);
        $("#t2-monthly-traffic").val(e).change()
    }),
    $("#t2-weekly-conversions").on("paste keyup", function() {
        var t = parseInt($("#t2-weekly-conversions").val().replace(",", "").replace(" ", ""))
          , e = parseInt(4.345 * t);
        $("#t2-monthly-conversions").val(e).change()
    }),
    $("#t2-num-variants").on("paste keyup", function() {
        var t = parseInt($("#t2-num-variants").val());
        2 > t ? (t = 2,
        $("#t2-num-variants").val(t).change()) : t > 11 && (t = 11,
        $("#t2-num-variants").val(t).change())
    })
});
var srm_timeout;
